
bin/stm32f4.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <__text_start>:
 8000000:	20000498 	.word	0x20000498
 8000004:	08000189 	.word	0x08000189
 8000008:	08000c31 	.word	0x08000c31
 800000c:	08000c31 	.word	0x08000c31
 8000010:	08000c31 	.word	0x08000c31
 8000014:	08000c31 	.word	0x08000c31
 8000018:	08000c31 	.word	0x08000c31
 800001c:	08000c31 	.word	0x08000c31
 8000020:	08000c31 	.word	0x08000c31
 8000024:	08000c31 	.word	0x08000c31
 8000028:	08000c31 	.word	0x08000c31
 800002c:	08000c31 	.word	0x08000c31
 8000030:	08000c31 	.word	0x08000c31
 8000034:	08000c31 	.word	0x08000c31
 8000038:	08000c31 	.word	0x08000c31
 800003c:	080004b5 	.word	0x080004b5
 8000040:	08000c31 	.word	0x08000c31
 8000044:	08000c31 	.word	0x08000c31
 8000048:	08000c31 	.word	0x08000c31
 800004c:	08000c31 	.word	0x08000c31
 8000050:	08000c31 	.word	0x08000c31
 8000054:	08000c31 	.word	0x08000c31
 8000058:	08000c31 	.word	0x08000c31
 800005c:	08000c31 	.word	0x08000c31
 8000060:	08000c31 	.word	0x08000c31
 8000064:	08000c31 	.word	0x08000c31
 8000068:	08000c31 	.word	0x08000c31
 800006c:	08000c31 	.word	0x08000c31
 8000070:	08000c31 	.word	0x08000c31
 8000074:	08000c31 	.word	0x08000c31
 8000078:	08000c31 	.word	0x08000c31
 800007c:	08000c31 	.word	0x08000c31
 8000080:	08000c31 	.word	0x08000c31
 8000084:	08000c31 	.word	0x08000c31
 8000088:	08000c31 	.word	0x08000c31
 800008c:	08000c31 	.word	0x08000c31
 8000090:	08000c31 	.word	0x08000c31
 8000094:	08000c31 	.word	0x08000c31
 8000098:	08000c31 	.word	0x08000c31
 800009c:	08000c31 	.word	0x08000c31
 80000a0:	08000c31 	.word	0x08000c31
 80000a4:	080009e1 	.word	0x080009e1
 80000a8:	08000c31 	.word	0x08000c31
 80000ac:	08000c31 	.word	0x08000c31
 80000b0:	08000c31 	.word	0x08000c31
 80000b4:	08000c31 	.word	0x08000c31
 80000b8:	08000c31 	.word	0x08000c31
 80000bc:	08000c31 	.word	0x08000c31
 80000c0:	08000c31 	.word	0x08000c31
 80000c4:	08000c31 	.word	0x08000c31
 80000c8:	08000c31 	.word	0x08000c31
 80000cc:	08000c31 	.word	0x08000c31
 80000d0:	08000c31 	.word	0x08000c31
 80000d4:	08000c31 	.word	0x08000c31
 80000d8:	08000c31 	.word	0x08000c31
 80000dc:	08000a41 	.word	0x08000a41
 80000e0:	08000c31 	.word	0x08000c31
 80000e4:	08000c31 	.word	0x08000c31
 80000e8:	08000c31 	.word	0x08000c31
 80000ec:	08000c31 	.word	0x08000c31
 80000f0:	08000c31 	.word	0x08000c31
 80000f4:	08000c31 	.word	0x08000c31
 80000f8:	08000c31 	.word	0x08000c31
 80000fc:	08000c31 	.word	0x08000c31
 8000100:	08000c31 	.word	0x08000c31
 8000104:	08000c31 	.word	0x08000c31
 8000108:	08000c31 	.word	0x08000c31
 800010c:	08000c31 	.word	0x08000c31
 8000110:	08000c31 	.word	0x08000c31
 8000114:	08000c31 	.word	0x08000c31
 8000118:	08000c31 	.word	0x08000c31
 800011c:	08000c31 	.word	0x08000c31
 8000120:	08000c31 	.word	0x08000c31
 8000124:	08000c31 	.word	0x08000c31
 8000128:	08000c31 	.word	0x08000c31
 800012c:	08000c31 	.word	0x08000c31
 8000130:	08000c31 	.word	0x08000c31
 8000134:	08000c31 	.word	0x08000c31
 8000138:	08000c31 	.word	0x08000c31
 800013c:	08000c31 	.word	0x08000c31
 8000140:	08000c31 	.word	0x08000c31
 8000144:	08000c31 	.word	0x08000c31
 8000148:	08000c31 	.word	0x08000c31
 800014c:	08000c31 	.word	0x08000c31
 8000150:	08000c31 	.word	0x08000c31
 8000154:	08000c31 	.word	0x08000c31
 8000158:	08000c31 	.word	0x08000c31
 800015c:	08000c31 	.word	0x08000c31
 8000160:	08000c31 	.word	0x08000c31
 8000164:	08000c31 	.word	0x08000c31
 8000168:	08000c31 	.word	0x08000c31
 800016c:	08000c31 	.word	0x08000c31
 8000170:	08000c31 	.word	0x08000c31
 8000174:	08000c31 	.word	0x08000c31
 8000178:	08000c31 	.word	0x08000c31
 800017c:	08000c31 	.word	0x08000c31
 8000180:	08000c31 	.word	0x08000c31
 8000184:	08000c31 	.word	0x08000c31

08000188 <Reset_Handler>:
+-----------------------------------------------------------------------------+
| Initialize the process stack pointer
+-----------------------------------------------------------------------------+
*/

	ldr		r0, =__process_stack_end
 8000188:	4810      	ldr	r0, [pc, #64]	; (80001cc <__default_low_level_init+0x2>)
	msr		PSP, r0
 800018a:	f380 8809 	msr	PSP, r0
+-----------------------------------------------------------------------------+
| Thread mode uses process stack (PSP) and is privileged
+-----------------------------------------------------------------------------+
*/

	movs	r0, #CONTROL_ALTERNATE_STACK
 800018e:	2002      	movs	r0, #2
	msr		CONTROL, r0
 8000190:	f380 8814 	msr	CONTROL, r0
	isb
 8000194:	f3bf 8f6f 	isb	sy
+-----------------------------------------------------------------------------+
| Branch to low_level_init_0() function (.data and .bss are not initialized!)
+-----------------------------------------------------------------------------+
*/

	ldr		r0, =low_level_init_0
 8000198:	480d      	ldr	r0, [pc, #52]	; (80001d0 <__default_low_level_init+0x6>)
	blx		r0
 800019a:	4780      	blx	r0
+-----------------------------------------------------------------------------+
| Initialize .data section
+-----------------------------------------------------------------------------+
*/

	ldr		r1, =__data_init_start
 800019c:	490d      	ldr	r1, [pc, #52]	; (80001d4 <__default_low_level_init+0xa>)
    ldr		r2, =__data_start
 800019e:	4a0e      	ldr	r2, [pc, #56]	; (80001d8 <__default_low_level_init+0xe>)
    ldr		r3, =__data_end
 80001a0:	4b0e      	ldr	r3, [pc, #56]	; (80001dc <__default_low_level_init+0x12>)

1:	cmp		r2, r3
 80001a2:	429a      	cmp	r2, r3
	ittt	lo
 80001a4:	bf3e      	ittt	cc
	ldrlo	r0, [r1], #4
 80001a6:	f851 0b04 	ldrcc.w	r0, [r1], #4
	strlo	r0, [r2], #4
 80001aa:	f842 0b04 	strcc.w	r0, [r2], #4
	blo		1b
 80001ae:	e7f8      	bcc.n	80001a2 <Reset_Handler+0x1a>
+-----------------------------------------------------------------------------+
| Zero-init .bss section
+-----------------------------------------------------------------------------+
*/

	movs	r0, #0
 80001b0:	2000      	movs	r0, #0
	ldr		r1, =__bss_start
 80001b2:	490b      	ldr	r1, [pc, #44]	; (80001e0 <__default_low_level_init+0x16>)
	ldr		r2, =__bss_end
 80001b4:	4a0b      	ldr	r2, [pc, #44]	; (80001e4 <__default_low_level_init+0x1a>)

1:	cmp		r1, r2
 80001b6:	4291      	cmp	r1, r2
	itt		lo
 80001b8:	bf3c      	itt	cc
	strlo	r0, [r1], #4
 80001ba:	f841 0b04 	strcc.w	r0, [r1], #4
	blo		1b
 80001be:	e7fa      	bcc.n	80001b6 <Reset_Handler+0x2e>
+-----------------------------------------------------------------------------+
| Branch to low_level_init_1() function
+-----------------------------------------------------------------------------+
*/

	ldr		r0, =low_level_init_1
 80001c0:	4809      	ldr	r0, [pc, #36]	; (80001e8 <__default_low_level_init+0x1e>)
	blx		r0
 80001c2:	4780      	blx	r0
+-----------------------------------------------------------------------------+
| Branch to main() with link
+-----------------------------------------------------------------------------+
*/

	ldr		r0, =main
 80001c4:	4809      	ldr	r0, [pc, #36]	; (80001ec <__default_low_level_init+0x22>)
	blx		r0
 80001c6:	4780      	blx	r0
+-----------------------------------------------------------------------------+
| On return - loop till the end of the world
+-----------------------------------------------------------------------------+
*/

	b		.
 80001c8:	e7fe      	b.n	80001c8 <Reset_Handler+0x40>

080001ca <__default_low_level_init>:
.thumb
.thumb_func
.global __default_low_level_init

__default_low_level_init:
	bx		lr
 80001ca:	4770      	bx	lr
+-----------------------------------------------------------------------------+
| Initialize the process stack pointer
+-----------------------------------------------------------------------------+
*/

	ldr		r0, =__process_stack_end
 80001cc:	20000898 	.word	0x20000898
+-----------------------------------------------------------------------------+
| Branch to low_level_init_0() function (.data and .bss are not initialized!)
+-----------------------------------------------------------------------------+
*/

	ldr		r0, =low_level_init_0
 80001d0:	080001cb 	.word	0x080001cb
+-----------------------------------------------------------------------------+
| Initialize .data section
+-----------------------------------------------------------------------------+
*/

	ldr		r1, =__data_init_start
 80001d4:	08000c54 	.word	0x08000c54
    ldr		r2, =__data_start
 80001d8:	20000000 	.word	0x20000000
    ldr		r3, =__data_end
 80001dc:	20000000 	.word	0x20000000
| Zero-init .bss section
+-----------------------------------------------------------------------------+
*/

	movs	r0, #0
	ldr		r1, =__bss_start
 80001e0:	20000000 	.word	0x20000000
	ldr		r2, =__bss_end
 80001e4:	20000294 	.word	0x20000294
+-----------------------------------------------------------------------------+
| Branch to low_level_init_1() function
+-----------------------------------------------------------------------------+
*/

	ldr		r0, =low_level_init_1
 80001e8:	080001cb 	.word	0x080001cb
+-----------------------------------------------------------------------------+
| Branch to main() with link
+-----------------------------------------------------------------------------+
*/

	ldr		r0, =main
 80001ec:	08000985 	.word	0x08000985

080001f0 <PLL_Start>:
*
* \return real frequency that was set
*//*-------------------------------------------------------------------------*/

uint32_t PLL_Start(uint32_t crystal, uint32_t frequency)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b08c      	sub	sp, #48	; 0x30
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
 80001f8:	6039      	str	r1, [r7, #0]
	uint32_t div, mul, div_core, vco_input_frequency, vco_output_frequency, frequency_core;
	uint32_t best_div = 0, best_mul = 0, best_div_core = 0, best_frequency_core = 0;
 80001fa:	2300      	movs	r3, #0
 80001fc:	623b      	str	r3, [r7, #32]
 80001fe:	2300      	movs	r3, #0
 8000200:	61fb      	str	r3, [r7, #28]
 8000202:	2300      	movs	r3, #0
 8000204:	61bb      	str	r3, [r7, #24]
 8000206:	2300      	movs	r3, #0
 8000208:	617b      	str	r3, [r7, #20]

	RCC_CR_HSEON_bb = 1;					// enable HSE clock
 800020a:	4b42      	ldr	r3, [pc, #264]	; (8000314 <PLL_Start+0x124>)
 800020c:	2201      	movs	r2, #1
 800020e:	601a      	str	r2, [r3, #0]
	Flash_SetLatency(frequency);			// configure Flash latency for desired frequency
 8000210:	6838      	ldr	r0, [r7, #0]
 8000212:	f000 f8a1 	bl	8000358 <Flash_SetLatency>

	for (div = 2; div <= 63; div++)			// PLLM in [2; 63]
 8000216:	2302      	movs	r3, #2
 8000218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800021a:	e047      	b.n	80002ac <PLL_Start+0xbc>
	{
		vco_input_frequency = crystal / div;
 800021c:	687a      	ldr	r2, [r7, #4]
 800021e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000220:	fbb2 f3f3 	udiv	r3, r2, r3
 8000224:	613b      	str	r3, [r7, #16]

		if ((vco_input_frequency < 1000000ul) || (vco_input_frequency > 2000000))	// skip invalid settings
 8000226:	693a      	ldr	r2, [r7, #16]
 8000228:	4b3b      	ldr	r3, [pc, #236]	; (8000318 <PLL_Start+0x128>)
 800022a:	429a      	cmp	r2, r3
 800022c:	d903      	bls.n	8000236 <PLL_Start+0x46>
 800022e:	693a      	ldr	r2, [r7, #16]
 8000230:	4b3a      	ldr	r3, [pc, #232]	; (800031c <PLL_Start+0x12c>)
 8000232:	429a      	cmp	r2, r3
 8000234:	d900      	bls.n	8000238 <PLL_Start+0x48>
			continue;
 8000236:	e036      	b.n	80002a6 <PLL_Start+0xb6>

		for (mul = 64; mul <= 432; mul++)	// PLLN in [64; 432]
 8000238:	2340      	movs	r3, #64	; 0x40
 800023a:	62bb      	str	r3, [r7, #40]	; 0x28
 800023c:	e02f      	b.n	800029e <PLL_Start+0xae>
		{
			vco_output_frequency = vco_input_frequency * mul;
 800023e:	693b      	ldr	r3, [r7, #16]
 8000240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000242:	fb02 f303 	mul.w	r3, r2, r3
 8000246:	60fb      	str	r3, [r7, #12]

			if ((vco_output_frequency < 64000000ul) || (vco_output_frequency > 432000000ul))	// skip invalid settings
 8000248:	68fa      	ldr	r2, [r7, #12]
 800024a:	4b35      	ldr	r3, [pc, #212]	; (8000320 <PLL_Start+0x130>)
 800024c:	429a      	cmp	r2, r3
 800024e:	d903      	bls.n	8000258 <PLL_Start+0x68>
 8000250:	68fa      	ldr	r2, [r7, #12]
 8000252:	4b34      	ldr	r3, [pc, #208]	; (8000324 <PLL_Start+0x134>)
 8000254:	429a      	cmp	r2, r3
 8000256:	d900      	bls.n	800025a <PLL_Start+0x6a>
				continue;
 8000258:	e01e      	b.n	8000298 <PLL_Start+0xa8>

			for (div_core = 2; div_core <= 8; div_core += 2)	// PLLP in {2, 4, 6, 8}
 800025a:	2302      	movs	r3, #2
 800025c:	627b      	str	r3, [r7, #36]	; 0x24
 800025e:	e018      	b.n	8000292 <PLL_Start+0xa2>
			{
				frequency_core = vco_output_frequency / div_core;
 8000260:	68fa      	ldr	r2, [r7, #12]
 8000262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000264:	fbb2 f3f3 	udiv	r3, r2, r3
 8000268:	60bb      	str	r3, [r7, #8]

				if (frequency_core > frequency)	// skip values over desired frequency
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	429a      	cmp	r2, r3
 8000270:	d900      	bls.n	8000274 <PLL_Start+0x84>
					continue;
 8000272:	e00b      	b.n	800028c <PLL_Start+0x9c>

				if (frequency_core > best_frequency_core)	// is this configuration better than previous one?
 8000274:	68ba      	ldr	r2, [r7, #8]
 8000276:	697b      	ldr	r3, [r7, #20]
 8000278:	429a      	cmp	r2, r3
 800027a:	d907      	bls.n	800028c <PLL_Start+0x9c>
				{
					best_frequency_core = frequency_core;	// yes - save values
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	617b      	str	r3, [r7, #20]
					best_div = div;
 8000280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000282:	623b      	str	r3, [r7, #32]
					best_mul = mul;
 8000284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000286:	61fb      	str	r3, [r7, #28]
					best_div_core = div_core;
 8000288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800028a:	61bb      	str	r3, [r7, #24]
			vco_output_frequency = vco_input_frequency * mul;

			if ((vco_output_frequency < 64000000ul) || (vco_output_frequency > 432000000ul))	// skip invalid settings
				continue;

			for (div_core = 2; div_core <= 8; div_core += 2)	// PLLP in {2, 4, 6, 8}
 800028c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800028e:	3302      	adds	r3, #2
 8000290:	627b      	str	r3, [r7, #36]	; 0x24
 8000292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000294:	2b08      	cmp	r3, #8
 8000296:	d9e3      	bls.n	8000260 <PLL_Start+0x70>
		vco_input_frequency = crystal / div;

		if ((vco_input_frequency < 1000000ul) || (vco_input_frequency > 2000000))	// skip invalid settings
			continue;

		for (mul = 64; mul <= 432; mul++)	// PLLN in [64; 432]
 8000298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800029a:	3301      	adds	r3, #1
 800029c:	62bb      	str	r3, [r7, #40]	; 0x28
 800029e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002a0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80002a4:	d9cb      	bls.n	800023e <PLL_Start+0x4e>
	uint32_t best_div = 0, best_mul = 0, best_div_core = 0, best_frequency_core = 0;

	RCC_CR_HSEON_bb = 1;					// enable HSE clock
	Flash_SetLatency(frequency);			// configure Flash latency for desired frequency

	for (div = 2; div <= 63; div++)			// PLLM in [2; 63]
 80002a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002a8:	3301      	adds	r3, #1
 80002aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002ae:	2b3f      	cmp	r3, #63	; 0x3f
 80002b0:	d9b4      	bls.n	800021c <PLL_Start+0x2c>
				}
			}
		}
	}

	RCC->PLLCFGR = (best_div << RCC_PLLCFGR_PLLM_bit) | (best_mul << RCC_PLLCFGR_PLLN_bit) | ((best_div_core / 2 - 1) << RCC_PLLCFGR_PLLP_bit) | RCC_PLLCFGR_PLLQ_DIV9 | RCC_PLLCFGR_PLLSRC_HSE;	// configure PLL factors, always divide USB clock by 9
 80002b2:	4b1d      	ldr	r3, [pc, #116]	; (8000328 <PLL_Start+0x138>)
 80002b4:	69fa      	ldr	r2, [r7, #28]
 80002b6:	0191      	lsls	r1, r2, #6
 80002b8:	6a3a      	ldr	r2, [r7, #32]
 80002ba:	4311      	orrs	r1, r2
 80002bc:	69ba      	ldr	r2, [r7, #24]
 80002be:	0852      	lsrs	r2, r2, #1
 80002c0:	3a01      	subs	r2, #1
 80002c2:	0412      	lsls	r2, r2, #16
 80002c4:	430a      	orrs	r2, r1
 80002c6:	f042 6214 	orr.w	r2, r2, #155189248	; 0x9400000
 80002ca:	605a      	str	r2, [r3, #4]

	RCC->CFGR = RCC_CFGR_PPRE2_DIV2 | RCC_CFGR_PPRE1_DIV4 | RCC_CFGR_HPRE_DIV1;	// AHB - no prescaler, APB1 - divide by 4, APB2 - divide by 2
 80002cc:	4b16      	ldr	r3, [pc, #88]	; (8000328 <PLL_Start+0x138>)
 80002ce:	f44f 4214 	mov.w	r2, #37888	; 0x9400
 80002d2:	609a      	str	r2, [r3, #8]

	while (!RCC_CR_HSERDY_bb);				// wait for stable clock
 80002d4:	bf00      	nop
 80002d6:	4b15      	ldr	r3, [pc, #84]	; (800032c <PLL_Start+0x13c>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d0fb      	beq.n	80002d6 <PLL_Start+0xe6>

	RCC_CR_PLLON_bb = 1;					// enable PLL
 80002de:	4b14      	ldr	r3, [pc, #80]	; (8000330 <PLL_Start+0x140>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	601a      	str	r2, [r3, #0]
	while (!RCC_CR_PLLRDY_bb);				// wait for PLL lock
 80002e4:	bf00      	nop
 80002e6:	4b13      	ldr	r3, [pc, #76]	; (8000334 <PLL_Start+0x144>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d0fb      	beq.n	80002e6 <PLL_Start+0xf6>

	RCC->CFGR |= RCC_CFGR_SW_PLL;			// change SYSCLK to PLL
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <PLL_Start+0x138>)
 80002f0:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <PLL_Start+0x138>)
 80002f2:	6892      	ldr	r2, [r2, #8]
 80002f4:	f042 0202 	orr.w	r2, r2, #2
 80002f8:	609a      	str	r2, [r3, #8]
	while (((RCC->CFGR) & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	// wait for switch
 80002fa:	bf00      	nop
 80002fc:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <PLL_Start+0x138>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	f003 030c 	and.w	r3, r3, #12
 8000304:	2b08      	cmp	r3, #8
 8000306:	d1f9      	bne.n	80002fc <PLL_Start+0x10c>

	return best_frequency_core;
 8000308:	697b      	ldr	r3, [r7, #20]
}
 800030a:	4618      	mov	r0, r3
 800030c:	3730      	adds	r7, #48	; 0x30
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	42470040 	.word	0x42470040
 8000318:	000f423f 	.word	0x000f423f
 800031c:	001e8480 	.word	0x001e8480
 8000320:	03d08fff 	.word	0x03d08fff
 8000324:	19bfcc00 	.word	0x19bfcc00
 8000328:	40023800 	.word	0x40023800
 800032c:	42470044 	.word	0x42470044
 8000330:	42470060 	.word	0x42470060
 8000334:	42470064 	.word	0x42470064

08000338 <FPU_Enable>:
* done by enabling CP10 and CP11 coprocessors in CPACR register (possible only
* when in privileged mode).
*//*-------------------------------------------------------------------------*/

void FPU_Enable(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2)));	// set CP10 and CP11 Full Access
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <FPU_Enable+0x1c>)
 800033e:	4a05      	ldr	r2, [pc, #20]	; (8000354 <FPU_Enable+0x1c>)
 8000340:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8000344:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000348:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif
}
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	e000ed00 	.word	0xe000ed00

08000358 <Flash_SetLatency>:
*
* \param [in] frequency defines the target frequency of the core
*//*-------------------------------------------------------------------------*/

void Flash_SetLatency(uint32_t frequency)
{
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	uint32_t wait_states;

	wait_states = frequency / 30000000UL;	// calculate wait_states (30M is valid for 2.7V to 3.6V voltage range, use 24M for 2.4V to 2.7V, 18M for 2.1V to 2.4V or 16M for  1.8V to 2.1V)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	09da      	lsrs	r2, r3, #7
 8000364:	4b0d      	ldr	r3, [pc, #52]	; (800039c <Flash_SetLatency+0x44>)
 8000366:	fba3 1302 	umull	r1, r3, r3, r2
 800036a:	0a9b      	lsrs	r3, r3, #10
 800036c:	60fb      	str	r3, [r7, #12]
	wait_states &= 7;						// trim to max allowed value - 7
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	f003 0307 	and.w	r3, r3, #7
 8000374:	60fb      	str	r3, [r7, #12]

	FLASH->ACR = wait_states;				// set wait_states, disable all caches and prefetch
 8000376:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <Flash_SetLatency+0x48>)
 8000378:	68fa      	ldr	r2, [r7, #12]
 800037a:	601a      	str	r2, [r3, #0]
	FLASH->ACR = FLASH_ACR_DCRST | FLASH_ACR_ICRST | wait_states;	// reset caches
 800037c:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <Flash_SetLatency+0x48>)
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 8000384:	601a      	str	r2, [r3, #0]
	FLASH->ACR = FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | wait_states;	// enable caches and prefetch
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <Flash_SetLatency+0x48>)
 8000388:	68fa      	ldr	r2, [r7, #12]
 800038a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800038e:	601a      	str	r2, [r3, #0]
}
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	011e54c7 	.word	0x011e54c7
 80003a0:	40023c00 	.word	0x40023c00

080003a4 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	6039      	str	r1, [r7, #0]
 80003ae:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80003b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	da0b      	bge.n	80003d0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80003b8:	490d      	ldr	r1, [pc, #52]	; (80003f0 <NVIC_SetPriority+0x4c>)
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	f003 030f 	and.w	r3, r3, #15
 80003c0:	3b04      	subs	r3, #4
 80003c2:	683a      	ldr	r2, [r7, #0]
 80003c4:	b2d2      	uxtb	r2, r2
 80003c6:	0112      	lsls	r2, r2, #4
 80003c8:	b2d2      	uxtb	r2, r2
 80003ca:	440b      	add	r3, r1
 80003cc:	761a      	strb	r2, [r3, #24]
 80003ce:	e009      	b.n	80003e4 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80003d0:	4908      	ldr	r1, [pc, #32]	; (80003f4 <NVIC_SetPriority+0x50>)
 80003d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003d6:	683a      	ldr	r2, [r7, #0]
 80003d8:	b2d2      	uxtb	r2, r2
 80003da:	0112      	lsls	r2, r2, #4
 80003dc:	b2d2      	uxtb	r2, r2
 80003de:	440b      	add	r3, r1
 80003e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	e000ed00 	.word	0xe000ed00
 80003f4:	e000e100 	.word	0xe000e100

080003f8 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000406:	d301      	bcc.n	800040c <SysTick_Config+0x14>
 8000408:	2301      	movs	r3, #1
 800040a:	e011      	b.n	8000430 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800040c:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <SysTick_Config+0x40>)
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000414:	3a01      	subs	r2, #1
 8000416:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000418:	f04f 30ff 	mov.w	r0, #4294967295
 800041c:	210f      	movs	r1, #15
 800041e:	f7ff ffc1 	bl	80003a4 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000422:	4b05      	ldr	r3, [pc, #20]	; (8000438 <SysTick_Config+0x40>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000428:	4b03      	ldr	r3, [pc, #12]	; (8000438 <SysTick_Config+0x40>)
 800042a:	2207      	movs	r2, #7
 800042c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800042e:	2300      	movs	r3, #0
 }
 8000430:	4618      	mov	r0, r3
 8000432:	3708      	adds	r7, #8
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	e000e010 	.word	0xe000e010

0800043c <delay_us>:
#include "delay.h"

void delay_us(__IO uint32_t us)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	delay_counter = us;
 8000444:	687a      	ldr	r2, [r7, #4]
 8000446:	4b06      	ldr	r3, [pc, #24]	; (8000460 <delay_us+0x24>)
 8000448:	601a      	str	r2, [r3, #0]

	while(delay_counter > 0);
 800044a:	bf00      	nop
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <delay_us+0x24>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d1fb      	bne.n	800044c <delay_us+0x10>
}
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	20000000 	.word	0x20000000

08000464 <delay_ms>:

void delay_ms(uint32_t ms)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
	for (; i < ms; i++)
 8000470:	e006      	b.n	8000480 <delay_ms+0x1c>
	{
		delay_us(1000);
 8000472:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000476:	f7ff ffe1 	bl	800043c <delay_us>
}

void delay_ms(uint32_t ms)
{
	uint32_t i = 0;
	for (; i < ms; i++)
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	3301      	adds	r3, #1
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fa      	ldr	r2, [r7, #12]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	429a      	cmp	r2, r3
 8000486:	d3f4      	bcc.n	8000472 <delay_ms+0xe>
	{
		delay_us(1000);
	}
}
 8000488:	3710      	adds	r7, #16
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop

08000490 <Delay_Config>:

void Delay_Config(uint32_t f)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	SysTick_Config(f / 1000000);
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <Delay_Config+0x20>)
 800049c:	fba3 1302 	umull	r1, r3, r3, r2
 80004a0:	0c9b      	lsrs	r3, r3, #18
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff ffa8 	bl	80003f8 <SysTick_Config>
}
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	431bde83 	.word	0x431bde83

080004b4 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
	if (delay_counter != 0)
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <SysTick_Handler+0x20>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d004      	beq.n	80004ca <SysTick_Handler+0x16>
	{
		delay_counter--;
 80004c0:	4b04      	ldr	r3, [pc, #16]	; (80004d4 <SysTick_Handler+0x20>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	1e5a      	subs	r2, r3, #1
 80004c6:	4b03      	ldr	r3, [pc, #12]	; (80004d4 <SysTick_Handler+0x20>)
 80004c8:	601a      	str	r2, [r3, #0]
	}
}
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	20000000 	.word	0x20000000

080004d8 <GPIO_InitAll>:
* \brief GPIO initialization.
* \details Enables all GPIO ports.
*//*-------------------------------------------------------------------------*/

void GPIO_InitAll(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=
 80004dc:	4a05      	ldr	r2, [pc, #20]	; (80004f4 <GPIO_InitAll+0x1c>)
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <GPIO_InitAll+0x1c>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80004e6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 80004ea:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_AHB1ENR_GPIOEEN |
		RCC_AHB1ENR_GPIOFEN |
		RCC_AHB1ENR_GPIOGEN |
		RCC_AHB1ENR_GPIOHEN |
		RCC_AHB1ENR_GPIOIEN; // enable all possible GPIO ports
}
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	40023800 	.word	0x40023800

080004f8 <GPIO_ConfigPin>:
* GPIO_[AF0; AF15]_{PP, OD}_{2MHz, 25MHz, 50MHz, 100MHz}_{PULL_UP, PULL_DOWN},
* GPIO_ANALOG}
*//*-------------------------------------------------------------------------*/

void GPIO_ConfigPin(GPIO_TypeDef *port_ptr, uint32_t pin, uint32_t configuration)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b08b      	sub	sp, #44	; 0x2c
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
	uint32_t moder, otyper, ospeedr, pupdr, afr, afrx;

	moder = port_ptr->MODER;				// localize
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	623b      	str	r3, [r7, #32]
	moder &= ~(GPIO_MODER_mask << (pin * 2));	// clear current setting
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	2203      	movs	r2, #3
 8000510:	fa02 f303 	lsl.w	r3, r2, r3
 8000514:	43db      	mvns	r3, r3
 8000516:	6a3a      	ldr	r2, [r7, #32]
 8000518:	4013      	ands	r3, r2
 800051a:	623b      	str	r3, [r7, #32]
	moder |= (GPIO_GET_MODER(configuration) << (pin * 2));	// apply new setting
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f003 020f 	and.w	r2, r3, #15
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	fa02 f303 	lsl.w	r3, r2, r3
 800052a:	6a3a      	ldr	r2, [r7, #32]
 800052c:	4313      	orrs	r3, r2
 800052e:	623b      	str	r3, [r7, #32]
	port_ptr->MODER = moder;				// save back
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	6a3a      	ldr	r2, [r7, #32]
 8000534:	601a      	str	r2, [r3, #0]

	otyper = port_ptr->OTYPER;				// localize
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	61fb      	str	r3, [r7, #28]
	otyper &= ~(GPIO_OTYPER_mask << pin);	// clear current setting
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	2201      	movs	r2, #1
 8000540:	fa02 f303 	lsl.w	r3, r2, r3
 8000544:	43db      	mvns	r3, r3
 8000546:	69fa      	ldr	r2, [r7, #28]
 8000548:	4013      	ands	r3, r2
 800054a:	61fb      	str	r3, [r7, #28]
	otyper |= (GPIO_GET_OTYPER(configuration) << pin);	// apply new setting
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000552:	091a      	lsrs	r2, r3, #4
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	fa02 f303 	lsl.w	r3, r2, r3
 800055a:	69fa      	ldr	r2, [r7, #28]
 800055c:	4313      	orrs	r3, r2
 800055e:	61fb      	str	r3, [r7, #28]
	port_ptr->OTYPER = otyper;				// save back
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	69fa      	ldr	r2, [r7, #28]
 8000564:	605a      	str	r2, [r3, #4]

	ospeedr = port_ptr->OSPEEDR;				// localize
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	61bb      	str	r3, [r7, #24]
	ospeedr &= ~(GPIO_OSPEEDR_mask << (pin * 2));	// clear current setting
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	2203      	movs	r2, #3
 8000572:	fa02 f303 	lsl.w	r3, r2, r3
 8000576:	43db      	mvns	r3, r3
 8000578:	69ba      	ldr	r2, [r7, #24]
 800057a:	4013      	ands	r3, r2
 800057c:	61bb      	str	r3, [r7, #24]
	ospeedr |= (GPIO_GET_OSPEEDR(configuration) << (pin * 2));	// apply new setting
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000584:	0a1a      	lsrs	r2, r3, #8
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	fa02 f303 	lsl.w	r3, r2, r3
 800058e:	69ba      	ldr	r2, [r7, #24]
 8000590:	4313      	orrs	r3, r2
 8000592:	61bb      	str	r3, [r7, #24]
	port_ptr->OSPEEDR = ospeedr;				// save back
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	69ba      	ldr	r2, [r7, #24]
 8000598:	609a      	str	r2, [r3, #8]

	pupdr = port_ptr->PUPDR;				// localize
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	617b      	str	r3, [r7, #20]
	pupdr &= ~(GPIO_PUPDR_mask << (pin * 2));	// clear current setting
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	2203      	movs	r2, #3
 80005a6:	fa02 f303 	lsl.w	r3, r2, r3
 80005aa:	43db      	mvns	r3, r3
 80005ac:	697a      	ldr	r2, [r7, #20]
 80005ae:	4013      	ands	r3, r2
 80005b0:	617b      	str	r3, [r7, #20]
	pupdr |= (GPIO_GET_PUPDR(configuration) << (pin * 2));	// apply new setting
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80005b8:	0b1a      	lsrs	r2, r3, #12
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	697a      	ldr	r2, [r7, #20]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	617b      	str	r3, [r7, #20]
	port_ptr->PUPDR = pupdr;				// save back
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	697a      	ldr	r2, [r7, #20]
 80005cc:	60da      	str	r2, [r3, #12]

	if (pin < 8)							// determine which AFR register should be used
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	2b07      	cmp	r3, #7
 80005d2:	d802      	bhi.n	80005da <GPIO_ConfigPin+0xe2>
		afrx = 0;							// AFRL - pins [0; 7]
 80005d4:	2300      	movs	r3, #0
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
 80005d8:	e004      	b.n	80005e4 <GPIO_ConfigPin+0xec>
	else
	{
		afrx = 1;							// AFRH - pins [8; 15]
 80005da:	2301      	movs	r3, #1
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
		pin -= 8;							// trim pin number
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	3b08      	subs	r3, #8
 80005e2:	60bb      	str	r3, [r7, #8]
	}

	afr = port_ptr->AFR[afrx];				// localize
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005e8:	3208      	adds	r2, #8
 80005ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005ee:	613b      	str	r3, [r7, #16]
	afr &= ~(GPIO_AFRx_mask << (pin * 4));	// clear current setting
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	220f      	movs	r2, #15
 80005f6:	fa02 f303 	lsl.w	r3, r2, r3
 80005fa:	43db      	mvns	r3, r3
 80005fc:	693a      	ldr	r2, [r7, #16]
 80005fe:	4013      	ands	r3, r2
 8000600:	613b      	str	r3, [r7, #16]
	afr |= (GPIO_GET_AFR(configuration) << (pin * 4));	// apply new setting
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000608:	0c1a      	lsrs	r2, r3, #16
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	4313      	orrs	r3, r2
 8000616:	613b      	str	r3, [r7, #16]
	port_ptr->AFR[afrx] = afr;				// save back
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800061c:	3208      	adds	r2, #8
 800061e:	6939      	ldr	r1, [r7, #16]
 8000620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8000624:	372c      	adds	r7, #44	; 0x2c
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <itoa>:
	acc->y = mems_read(0x2B);
    acc->z = mems_read(0x2D);
}

int itoa(int value, char *sp, int radix)
{
 8000630:	b480      	push	{r7}
 8000632:	b08f      	sub	sp, #60	; 0x3c
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
    char tmp[16];// be careful with the length of the buffer
    char *tp = tmp;
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	637b      	str	r3, [r7, #52]	; 0x34
    int i;
    unsigned v;

    int sign = (radix == 10 && value < 0);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2b0a      	cmp	r3, #10
 8000646:	d104      	bne.n	8000652 <itoa+0x22>
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	2b00      	cmp	r3, #0
 800064c:	da01      	bge.n	8000652 <itoa+0x22>
 800064e:	2301      	movs	r3, #1
 8000650:	e000      	b.n	8000654 <itoa+0x24>
 8000652:	2300      	movs	r3, #0
 8000654:	62bb      	str	r3, [r7, #40]	; 0x28
    if (sign)
 8000656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000658:	2b00      	cmp	r3, #0
 800065a:	d003      	beq.n	8000664 <itoa+0x34>
        v = -value;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	425b      	negs	r3, r3
 8000660:	633b      	str	r3, [r7, #48]	; 0x30
    else
        v = (unsigned)value;

    while (v || tp == tmp)
 8000662:	e023      	b.n	80006ac <itoa+0x7c>

    int sign = (radix == 10 && value < 0);
    if (sign)
        v = -value;
    else
        v = (unsigned)value;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	633b      	str	r3, [r7, #48]	; 0x30

    while (v || tp == tmp)
 8000668:	e020      	b.n	80006ac <itoa+0x7c>
    {
        i = v % radix;
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800066e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000672:	fb02 f201 	mul.w	r2, r2, r1
 8000676:	1a9b      	subs	r3, r3, r2
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
        v /= radix; // v/=radix uses less CPU clocks than v=v/radix does
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800067e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
        if (i < 10)
 8000684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000686:	2b09      	cmp	r3, #9
 8000688:	dc08      	bgt.n	800069c <itoa+0x6c>
          *tp++ = i+'0';
 800068a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800068c:	1c5a      	adds	r2, r3, #1
 800068e:	637a      	str	r2, [r7, #52]	; 0x34
 8000690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	3230      	adds	r2, #48	; 0x30
 8000696:	b2d2      	uxtb	r2, r2
 8000698:	701a      	strb	r2, [r3, #0]
 800069a:	e007      	b.n	80006ac <itoa+0x7c>
        else
          *tp++ = i + 'a' - 10;
 800069c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800069e:	1c5a      	adds	r2, r3, #1
 80006a0:	637a      	str	r2, [r7, #52]	; 0x34
 80006a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	3257      	adds	r2, #87	; 0x57
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	701a      	strb	r2, [r3, #0]
    if (sign)
        v = -value;
    else
        v = (unsigned)value;

    while (v || tp == tmp)
 80006ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d1db      	bne.n	800066a <itoa+0x3a>
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d0d6      	beq.n	800066a <itoa+0x3a>
          *tp++ = i+'0';
        else
          *tp++ = i + 'a' - 10;
    }

    int len = tp - tmp;
 80006bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (sign)
 80006c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d008      	beq.n	80006de <itoa+0xae>
    {
        *sp++ = '-';
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	1c5a      	adds	r2, r3, #1
 80006d0:	60ba      	str	r2, [r7, #8]
 80006d2:	222d      	movs	r2, #45	; 0x2d
 80006d4:	701a      	strb	r2, [r3, #0]
        len++;
 80006d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d8:	3301      	adds	r3, #1
 80006da:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    while (tp > tmp)
 80006dc:	e009      	b.n	80006f2 <itoa+0xc2>
 80006de:	e008      	b.n	80006f2 <itoa+0xc2>
        *sp++ = *--tp;
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	60ba      	str	r2, [r7, #8]
 80006e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006e8:	3a01      	subs	r2, #1
 80006ea:	637a      	str	r2, [r7, #52]	; 0x34
 80006ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006ee:	7812      	ldrb	r2, [r2, #0]
 80006f0:	701a      	strb	r2, [r3, #0]
    {
        *sp++ = '-';
        len++;
    }

    while (tp > tmp)
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d8f1      	bhi.n	80006e0 <itoa+0xb0>
        *sp++ = *--tp;

    return len;
 80006fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80006fe:	4618      	mov	r0, r3
 8000700:	373c      	adds	r7, #60	; 0x3c
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop

0800070c <i2c_init>:
}

*/

void i2c_init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	GPIO_ConfigPin(GPIOB, 8, GPIO_AF4_OD_25MHz_PULL_UP);	//sda
 8000710:	4819      	ldr	r0, [pc, #100]	; (8000778 <i2c_init+0x6c>)
 8000712:	2108      	movs	r1, #8
 8000714:	4a19      	ldr	r2, [pc, #100]	; (800077c <i2c_init+0x70>)
 8000716:	f7ff feef 	bl	80004f8 <GPIO_ConfigPin>
	GPIO_ConfigPin(GPIOB, 9, GPIO_AF4_OD_25MHz_PULL_UP);	//scl
 800071a:	4817      	ldr	r0, [pc, #92]	; (8000778 <i2c_init+0x6c>)
 800071c:	2109      	movs	r1, #9
 800071e:	4a17      	ldr	r2, [pc, #92]	; (800077c <i2c_init+0x70>)
 8000720:	f7ff feea 	bl	80004f8 <GPIO_ConfigPin>

	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <i2c_init+0x74>)
 8000726:	4a16      	ldr	r2, [pc, #88]	; (8000780 <i2c_init+0x74>)
 8000728:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800072a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800072e:	641a      	str	r2, [r3, #64]	; 0x40

	I2C1->CR1 |= I2C_CR1_SWRST;            //reset I2C
 8000730:	4a14      	ldr	r2, [pc, #80]	; (8000784 <i2c_init+0x78>)
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <i2c_init+0x78>)
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	b29b      	uxth	r3, r3
 8000738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800073c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000740:	b29b      	uxth	r3, r3
 8000742:	8013      	strh	r3, [r2, #0]
	I2C1->CR1 &= ~I2C_CR1_SWRST;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <i2c_init+0x78>)
 8000746:	4a0f      	ldr	r2, [pc, #60]	; (8000784 <i2c_init+0x78>)
 8000748:	8812      	ldrh	r2, [r2, #0]
 800074a:	b292      	uxth	r2, r2
 800074c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8000750:	b292      	uxth	r2, r2
 8000752:	801a      	strh	r2, [r3, #0]

	I2C1->CR2 = 18;                  // 18Mhz Periph clock
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <i2c_init+0x78>)
 8000756:	2212      	movs	r2, #18
 8000758:	809a      	strh	r2, [r3, #4]
	I2C1->TRISE = 19;                // limit slope 1000ns
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <i2c_init+0x78>)
 800075c:	2213      	movs	r2, #19
 800075e:	841a      	strh	r2, [r3, #32]
	I2C1->CCR = 90;                  // setup speed (100kHz)
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <i2c_init+0x78>)
 8000762:	225a      	movs	r2, #90	; 0x5a
 8000764:	839a      	strh	r2, [r3, #28]
	I2C1->CR1 |= I2C_CR1_PE;         // enable peripheral
 8000766:	4b07      	ldr	r3, [pc, #28]	; (8000784 <i2c_init+0x78>)
 8000768:	4a06      	ldr	r2, [pc, #24]	; (8000784 <i2c_init+0x78>)
 800076a:	8812      	ldrh	r2, [r2, #0]
 800076c:	b292      	uxth	r2, r2
 800076e:	f042 0201 	orr.w	r2, r2, #1
 8000772:	b292      	uxth	r2, r2
 8000774:	801a      	strh	r2, [r3, #0]


}
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40020400 	.word	0x40020400
 800077c:	00041112 	.word	0x00041112
 8000780:	40023800 	.word	0x40023800
 8000784:	40005400 	.word	0x40005400

08000788 <I2C_WRITE_REG>:

void I2C_WRITE_REG(uint8_t address, uint8_t reg)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	4602      	mov	r2, r0
 8000790:	460b      	mov	r3, r1
 8000792:	71fa      	strb	r2, [r7, #7]
 8000794:	71bb      	strb	r3, [r7, #6]
	uint32_t dummy;

	I2C1->CR1 |= I2C_CR1_START;				// request a start
 8000796:	4b25      	ldr	r3, [pc, #148]	; (800082c <I2C_WRITE_REG+0xa4>)
 8000798:	4a24      	ldr	r2, [pc, #144]	; (800082c <I2C_WRITE_REG+0xa4>)
 800079a:	8812      	ldrh	r2, [r2, #0]
 800079c:	b292      	uxth	r2, r2
 800079e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007a2:	b292      	uxth	r2, r2
 80007a4:	801a      	strh	r2, [r3, #0]
	while(!(I2C1->SR1 & I2C_SR1_SB));		// wait for start to finish
 80007a6:	bf00      	nop
 80007a8:	4b20      	ldr	r3, [pc, #128]	; (800082c <I2C_WRITE_REG+0xa4>)
 80007aa:	8a9b      	ldrh	r3, [r3, #20]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d0f8      	beq.n	80007a8 <I2C_WRITE_REG+0x20>
	dummy = I2C1->SR1;						// read of SR1 clears the flag
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <I2C_WRITE_REG+0xa4>)
 80007b8:	8a9b      	ldrh	r3, [r3, #20]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	60fb      	str	r3, [r7, #12]
	I2C1->DR = address;						// transfer address
 80007be:	4b1b      	ldr	r3, [pc, #108]	; (800082c <I2C_WRITE_REG+0xa4>)
 80007c0:	79fa      	ldrb	r2, [r7, #7]
 80007c2:	b292      	uxth	r2, r2
 80007c4:	821a      	strh	r2, [r3, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));	// wait for address transfer
 80007c6:	bf00      	nop
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <I2C_WRITE_REG+0xa4>)
 80007ca:	8a9b      	ldrh	r3, [r3, #20]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0f8      	beq.n	80007c8 <I2C_WRITE_REG+0x40>
	dummy = I2C1->SR1;						// clear the flag
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <I2C_WRITE_REG+0xa4>)
 80007d8:	8a9b      	ldrh	r3, [r3, #20]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	60fb      	str	r3, [r7, #12]
	dummy = I2C1->SR2;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <I2C_WRITE_REG+0xa4>)
 80007e0:	8b1b      	ldrh	r3, [r3, #24]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	60fb      	str	r3, [r7, #12]

	while (!(I2C1->SR1 & I2C_SR1_TXE));	// wait for DR empty
 80007e6:	bf00      	nop
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <I2C_WRITE_REG+0xa4>)
 80007ea:	8a9b      	ldrh	r3, [r3, #20]
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d0f8      	beq.n	80007e8 <I2C_WRITE_REG+0x60>
	I2C1->DR = reg;					// transfer one byte, increment pointer
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <I2C_WRITE_REG+0xa4>)
 80007f8:	79ba      	ldrb	r2, [r7, #6]
 80007fa:	b292      	uxth	r2, r2
 80007fc:	821a      	strh	r2, [r3, #16]

	while ((I2C1->SR1 & I2C_SR1_TXE) == RESET || (I2C1->SR1 & I2C_SR1_BTF) == SET);
 80007fe:	bf00      	nop
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <I2C_WRITE_REG+0xa4>)
 8000802:	8a9b      	ldrh	r3, [r3, #20]
 8000804:	b29b      	uxth	r3, r3
 8000806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080a:	2b00      	cmp	r3, #0
 800080c:	d0f8      	beq.n	8000800 <I2C_WRITE_REG+0x78>
 800080e:	4b07      	ldr	r3, [pc, #28]	; (800082c <I2C_WRITE_REG+0xa4>)
 8000810:	8a9b      	ldrh	r3, [r3, #20]
										// wait for bus not-busy
	I2C1->CR1 |= I2C_CR1_STOP;
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <I2C_WRITE_REG+0xa4>)
 8000814:	4a05      	ldr	r2, [pc, #20]	; (800082c <I2C_WRITE_REG+0xa4>)
 8000816:	8812      	ldrh	r2, [r2, #0]
 8000818:	b292      	uxth	r2, r2
 800081a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800081e:	b292      	uxth	r2, r2
 8000820:	801a      	strh	r2, [r3, #0]
}
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	40005400 	.word	0x40005400

08000830 <I2C_READ_REG>:

void I2C_READ_REG( uint8_t adres, uint8_t reg_adres, uint8_t * dane, uint8_t len )
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	603a      	str	r2, [r7, #0]
 8000838:	4602      	mov	r2, r0
 800083a:	71fa      	strb	r2, [r7, #7]
 800083c:	460a      	mov	r2, r1
 800083e:	71ba      	strb	r2, [r7, #6]
 8000840:	717b      	strb	r3, [r7, #5]
	uint32_t dummy;

	I2C1->CR1 |= I2C_CR1_START;
 8000842:	4b43      	ldr	r3, [pc, #268]	; (8000950 <I2C_READ_REG+0x120>)
 8000844:	4a42      	ldr	r2, [pc, #264]	; (8000950 <I2C_READ_REG+0x120>)
 8000846:	8812      	ldrh	r2, [r2, #0]
 8000848:	b292      	uxth	r2, r2
 800084a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800084e:	b292      	uxth	r2, r2
 8000850:	801a      	strh	r2, [r3, #0]
	while( !( I2C1->SR1 & I2C_SR1_SB ));
 8000852:	bf00      	nop
 8000854:	4b3e      	ldr	r3, [pc, #248]	; (8000950 <I2C_READ_REG+0x120>)
 8000856:	8a9b      	ldrh	r3, [r3, #20]
 8000858:	b29b      	uxth	r3, r3
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	2b00      	cmp	r3, #0
 8000860:	d0f8      	beq.n	8000854 <I2C_READ_REG+0x24>
	I2C1->DR = adres;
 8000862:	4b3b      	ldr	r3, [pc, #236]	; (8000950 <I2C_READ_REG+0x120>)
 8000864:	79fa      	ldrb	r2, [r7, #7]
 8000866:	b292      	uxth	r2, r2
 8000868:	821a      	strh	r2, [r3, #16]
	while( !( I2C1->SR1 & I2C_SR1_ADDR ));
 800086a:	bf00      	nop
 800086c:	4b38      	ldr	r3, [pc, #224]	; (8000950 <I2C_READ_REG+0x120>)
 800086e:	8a9b      	ldrh	r3, [r3, #20]
 8000870:	b29b      	uxth	r3, r3
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	2b00      	cmp	r3, #0
 8000878:	d0f8      	beq.n	800086c <I2C_READ_REG+0x3c>
	dummy = I2C1->SR2;
 800087a:	4b35      	ldr	r3, [pc, #212]	; (8000950 <I2C_READ_REG+0x120>)
 800087c:	8b1b      	ldrh	r3, [r3, #24]
 800087e:	b29b      	uxth	r3, r3
 8000880:	60fb      	str	r3, [r7, #12]
	while( !( I2C1->SR1 & I2C_SR1_TXE ));
 8000882:	bf00      	nop
 8000884:	4b32      	ldr	r3, [pc, #200]	; (8000950 <I2C_READ_REG+0x120>)
 8000886:	8a9b      	ldrh	r3, [r3, #20]
 8000888:	b29b      	uxth	r3, r3
 800088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0f8      	beq.n	8000884 <I2C_READ_REG+0x54>
	I2C1->DR = reg_adres;
 8000892:	4b2f      	ldr	r3, [pc, #188]	; (8000950 <I2C_READ_REG+0x120>)
 8000894:	79ba      	ldrb	r2, [r7, #6]
 8000896:	b292      	uxth	r2, r2
 8000898:	821a      	strh	r2, [r3, #16]
	while( !( I2C1->SR1 & I2C_SR1_BTF ));
 800089a:	bf00      	nop
 800089c:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <I2C_READ_REG+0x120>)
 800089e:	8a9b      	ldrh	r3, [r3, #20]
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d0f8      	beq.n	800089c <I2C_READ_REG+0x6c>
	I2C1->CR1 |= I2C_CR1_START;
 80008aa:	4b29      	ldr	r3, [pc, #164]	; (8000950 <I2C_READ_REG+0x120>)
 80008ac:	4a28      	ldr	r2, [pc, #160]	; (8000950 <I2C_READ_REG+0x120>)
 80008ae:	8812      	ldrh	r2, [r2, #0]
 80008b0:	b292      	uxth	r2, r2
 80008b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80008b6:	b292      	uxth	r2, r2
 80008b8:	801a      	strh	r2, [r3, #0]
	while( !( I2C1->SR1 & I2C_SR1_SB ));
 80008ba:	bf00      	nop
 80008bc:	4b24      	ldr	r3, [pc, #144]	; (8000950 <I2C_READ_REG+0x120>)
 80008be:	8a9b      	ldrh	r3, [r3, #20]
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d0f8      	beq.n	80008bc <I2C_READ_REG+0x8c>
	I2C1->DR = adres | 0x01;
 80008ca:	4b21      	ldr	r3, [pc, #132]	; (8000950 <I2C_READ_REG+0x120>)
 80008cc:	79fa      	ldrb	r2, [r7, #7]
 80008ce:	f042 0201 	orr.w	r2, r2, #1
 80008d2:	b2d2      	uxtb	r2, r2
 80008d4:	821a      	strh	r2, [r3, #16]
	while( !( I2C1->SR1 & I2C_SR1_ADDR ));
 80008d6:	bf00      	nop
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <I2C_READ_REG+0x120>)
 80008da:	8a9b      	ldrh	r3, [r3, #20]
 80008dc:	b29b      	uxth	r3, r3
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d0f8      	beq.n	80008d8 <I2C_READ_REG+0xa8>
	dummy = I2C1->SR2;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <I2C_READ_REG+0x120>)
 80008e8:	8b1b      	ldrh	r3, [r3, #24]
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	60fb      	str	r3, [r7, #12]

	while( len )
 80008ee:	e01e      	b.n	800092e <I2C_READ_REG+0xfe>
	{
	   if( len == 1 )
 80008f0:	797b      	ldrb	r3, [r7, #5]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d108      	bne.n	8000908 <I2C_READ_REG+0xd8>
	       I2C1->CR1 &= ~I2C_CR1_ACK;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <I2C_READ_REG+0x120>)
 80008f8:	4a15      	ldr	r2, [pc, #84]	; (8000950 <I2C_READ_REG+0x120>)
 80008fa:	8812      	ldrh	r2, [r2, #0]
 80008fc:	b292      	uxth	r2, r2
 80008fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000902:	b292      	uxth	r2, r2
 8000904:	801a      	strh	r2, [r3, #0]

	   while( !( I2C1->SR1 & I2C_SR1_RXNE ));
 8000906:	e7ff      	b.n	8000908 <I2C_READ_REG+0xd8>
 8000908:	bf00      	nop
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <I2C_READ_REG+0x120>)
 800090c:	8a9b      	ldrh	r3, [r3, #20]
 800090e:	b29b      	uxth	r3, r3
 8000910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000914:	2b00      	cmp	r3, #0
 8000916:	d0f8      	beq.n	800090a <I2C_READ_REG+0xda>
	   *( dane++ ) = I2C1->DR;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	1c5a      	adds	r2, r3, #1
 800091c:	603a      	str	r2, [r7, #0]
 800091e:	4a0c      	ldr	r2, [pc, #48]	; (8000950 <I2C_READ_REG+0x120>)
 8000920:	8a12      	ldrh	r2, [r2, #16]
 8000922:	b292      	uxth	r2, r2
 8000924:	b2d2      	uxtb	r2, r2
 8000926:	701a      	strb	r2, [r3, #0]

	   len--;
 8000928:	797b      	ldrb	r3, [r7, #5]
 800092a:	3b01      	subs	r3, #1
 800092c:	717b      	strb	r3, [r7, #5]
	while( !( I2C1->SR1 & I2C_SR1_SB ));
	I2C1->DR = adres | 0x01;
	while( !( I2C1->SR1 & I2C_SR1_ADDR ));
	dummy = I2C1->SR2;

	while( len )
 800092e:	797b      	ldrb	r3, [r7, #5]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d1dd      	bne.n	80008f0 <I2C_READ_REG+0xc0>
	   *( dane++ ) = I2C1->DR;

	   len--;
	}

	I2C1->CR1 |= I2C_CR1_STOP;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <I2C_READ_REG+0x120>)
 8000936:	4a06      	ldr	r2, [pc, #24]	; (8000950 <I2C_READ_REG+0x120>)
 8000938:	8812      	ldrh	r2, [r2, #0]
 800093a:	b292      	uxth	r2, r2
 800093c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000940:	b292      	uxth	r2, r2
 8000942:	801a      	strh	r2, [r3, #0]
}
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40005400 	.word	0x40005400

08000954 <readtemp>:

uint32_t readtemp(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
	I2C_WRITE_REG(0x77, 0x50 + 1);
 800095a:	2077      	movs	r0, #119	; 0x77
 800095c:	2151      	movs	r1, #81	; 0x51
 800095e:	f7ff ff13 	bl	8000788 <I2C_WRITE_REG>
	delay_ms(10);
 8000962:	200a      	movs	r0, #10
 8000964:	f7ff fd7e 	bl	8000464 <delay_ms>

	uint32_t b = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
	I2C_READ_REG(0x77, 0, (uint8_t*) b, 3);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2077      	movs	r0, #119	; 0x77
 8000970:	2100      	movs	r1, #0
 8000972:	461a      	mov	r2, r3
 8000974:	2303      	movs	r3, #3
 8000976:	f7ff ff5b 	bl	8000830 <I2C_READ_REG>
	return b;
 800097a:	687b      	ldr	r3, [r7, #4]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <main>:

int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
	FPU_Enable();
 800098a:	f7ff fcd5 	bl	8000338 <FPU_Enable>
	PLL_Start(CRYSTAL, FREQUENCY);
 800098e:	4811      	ldr	r0, [pc, #68]	; (80009d4 <main+0x50>)
 8000990:	4911      	ldr	r1, [pc, #68]	; (80009d8 <main+0x54>)
 8000992:	f7ff fc2d 	bl	80001f0 <PLL_Start>
	GPIO_InitAll();
 8000996:	f7ff fd9f 	bl	80004d8 <GPIO_InitAll>
	Delay_Config(168000000UL);
 800099a:	480f      	ldr	r0, [pc, #60]	; (80009d8 <main+0x54>)
 800099c:	f7ff fd78 	bl	8000490 <Delay_Config>
	Serial_Init();
 80009a0:	f000 f8cc 	bl	8000b3c <Serial_Init>
	Serial_Puts("test usart3...\r\n");
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <main+0x58>)
 80009a6:	f000 f92f 	bl	8000c08 <Serial_Puts>

	i2c_init();
 80009aa:	f7ff feaf 	bl	800070c <i2c_init>
	TIM4->CR1 |= TIM_CR1_CEN;*/

	while(1)
	{

		uint32_t t = readtemp();
 80009ae:	f7ff ffd1 	bl	8000954 <readtemp>
 80009b2:	60f8      	str	r0, [r7, #12]

			char buf[10];
			itoa(t, buf, 16);
 80009b4:	68fa      	ldr	r2, [r7, #12]
 80009b6:	463b      	mov	r3, r7
 80009b8:	4610      	mov	r0, r2
 80009ba:	4619      	mov	r1, r3
 80009bc:	2210      	movs	r2, #16
 80009be:	f7ff fe37 	bl	8000630 <itoa>
			Serial_Puts(buf);
 80009c2:	463b      	mov	r3, r7
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 f91f 	bl	8000c08 <Serial_Puts>

			delay_ms(100);
 80009ca:	2064      	movs	r0, #100	; 0x64
 80009cc:	f7ff fd4a 	bl	8000464 <delay_ms>
		itoa(acc.z, z, 10);
		Serial_Puts(z);

		Serial_Puts("\r\n");
*/
	}
 80009d0:	e7ed      	b.n	80009ae <main+0x2a>
 80009d2:	bf00      	nop
 80009d4:	007a1200 	.word	0x007a1200
 80009d8:	0a037a00 	.word	0x0a037a00
 80009dc:	08000c40 	.word	0x08000c40

080009e0 <TIM1_UP_TIM10_IRQHandler>:

	return 0;
}

void TIM1_UP_TIM10_IRQHandler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
	if (TIM1->SR & TIM_SR_UIF)
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <TIM1_UP_TIM10_IRQHandler+0x2c>)
 80009e6:	8a1b      	ldrh	r3, [r3, #16]
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d007      	beq.n	8000a02 <TIM1_UP_TIM10_IRQHandler+0x22>
	{
		TIM1->SR &= ~TIM_SR_UIF;
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <TIM1_UP_TIM10_IRQHandler+0x2c>)
 80009f4:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <TIM1_UP_TIM10_IRQHandler+0x2c>)
 80009f6:	8a12      	ldrh	r2, [r2, #16]
 80009f8:	b292      	uxth	r2, r2
 80009fa:	f022 0201 	bic.w	r2, r2, #1
 80009fe:	b292      	uxth	r2, r2
 8000a00:	821a      	strh	r2, [r3, #16]
		//TIM4->CCR1 += 1;
	}
}
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40010000 	.word	0x40010000

08000a10 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <NVIC_EnableIRQ+0x2c>)
 8000a1c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000a20:	0952      	lsrs	r2, r2, #5
 8000a22:	79f9      	ldrb	r1, [r7, #7]
 8000a24:	f001 011f 	and.w	r1, r1, #31
 8000a28:	2001      	movs	r0, #1
 8000a2a:	fa00 f101 	lsl.w	r1, r0, r1
 8000a2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000e100 	.word	0xe000e100

08000a40 <USART3_IRQHandler>:
static char txQueueData[TX_BUFFER_SIZE];
volatile uint32_t txQueueHead = 0;
volatile uint32_t txQueueTail = 0;

void USART3_IRQHandler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	if ((USART3->SR & USART_SR_RXNE) && (USART3->CR1 & USART_CR1_RXNEIE))
 8000a44:	4b35      	ldr	r3, [pc, #212]	; (8000b1c <USART3_IRQHandler+0xdc>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	f003 0320 	and.w	r3, r3, #32
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d031      	beq.n	8000ab6 <USART3_IRQHandler+0x76>
 8000a52:	4b32      	ldr	r3, [pc, #200]	; (8000b1c <USART3_IRQHandler+0xdc>)
 8000a54:	899b      	ldrh	r3, [r3, #12]
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	f003 0320 	and.w	r3, r3, #32
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d02a      	beq.n	8000ab6 <USART3_IRQHandler+0x76>
	{
		if (rxQueueHead - rxQueueTail == RX_BUFFER_SIZE - 1)
 8000a60:	4b2f      	ldr	r3, [pc, #188]	; (8000b20 <USART3_IRQHandler+0xe0>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b2f      	ldr	r3, [pc, #188]	; (8000b24 <USART3_IRQHandler+0xe4>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	1ad2      	subs	r2, r2, r3
 8000a6a:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d10e      	bne.n	8000a90 <USART3_IRQHandler+0x50>
		{
			USART3->CR1 &= ~USART_CR1_RXNEIE;
 8000a72:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <USART3_IRQHandler+0xdc>)
 8000a74:	4a29      	ldr	r2, [pc, #164]	; (8000b1c <USART3_IRQHandler+0xdc>)
 8000a76:	8992      	ldrh	r2, [r2, #12]
 8000a78:	b292      	uxth	r2, r2
 8000a7a:	f022 0220 	bic.w	r2, r2, #32
 8000a7e:	b292      	uxth	r2, r2
 8000a80:	819a      	strh	r2, [r3, #12]
			GPIOD->ODR ^= (1 << 15);
 8000a82:	4b29      	ldr	r3, [pc, #164]	; (8000b28 <USART3_IRQHandler+0xe8>)
 8000a84:	4a28      	ldr	r2, [pc, #160]	; (8000b28 <USART3_IRQHandler+0xe8>)
 8000a86:	6952      	ldr	r2, [r2, #20]
 8000a88:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
 8000a8c:	615a      	str	r2, [r3, #20]
 8000a8e:	e012      	b.n	8000ab6 <USART3_IRQHandler+0x76>
		}
		else
		{
			rxQueueData[++rxQueueHead % RX_BUFFER_SIZE] = USART3->DR;
 8000a90:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <USART3_IRQHandler+0xe0>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	3301      	adds	r3, #1
 8000a96:	4a22      	ldr	r2, [pc, #136]	; (8000b20 <USART3_IRQHandler+0xe0>)
 8000a98:	6013      	str	r3, [r2, #0]
 8000a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a9e:	4a1f      	ldr	r2, [pc, #124]	; (8000b1c <USART3_IRQHandler+0xdc>)
 8000aa0:	8892      	ldrh	r2, [r2, #4]
 8000aa2:	b292      	uxth	r2, r2
 8000aa4:	b2d1      	uxtb	r1, r2
 8000aa6:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <USART3_IRQHandler+0xec>)
 8000aa8:	54d1      	strb	r1, [r2, r3]
			GPIOD->ODR ^= (1 << 12);
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <USART3_IRQHandler+0xe8>)
 8000aac:	4a1e      	ldr	r2, [pc, #120]	; (8000b28 <USART3_IRQHandler+0xe8>)
 8000aae:	6952      	ldr	r2, [r2, #20]
 8000ab0:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8000ab4:	615a      	str	r2, [r3, #20]
		}

	}

	if ((USART3->SR & USART_SR_TXE) && (USART3->CR1 & USART_CR1_TXEIE))
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <USART3_IRQHandler+0xdc>)
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d026      	beq.n	8000b12 <USART3_IRQHandler+0xd2>
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <USART3_IRQHandler+0xdc>)
 8000ac6:	899b      	ldrh	r3, [r3, #12]
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d01f      	beq.n	8000b12 <USART3_IRQHandler+0xd2>
	{
		if (txQueueHead == txQueueTail)
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <USART3_IRQHandler+0xf0>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <USART3_IRQHandler+0xf4>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d108      	bne.n	8000af0 <USART3_IRQHandler+0xb0>
		{
			USART3->CR1 &= ~USART_CR1_TXEIE;
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <USART3_IRQHandler+0xdc>)
 8000ae0:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <USART3_IRQHandler+0xdc>)
 8000ae2:	8992      	ldrh	r2, [r2, #12]
 8000ae4:	b292      	uxth	r2, r2
 8000ae6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000aea:	b292      	uxth	r2, r2
 8000aec:	819a      	strh	r2, [r3, #12]
 8000aee:	e010      	b.n	8000b12 <USART3_IRQHandler+0xd2>
		}
		else
		{
			USART3->DR = txQueueData[++txQueueTail % TX_BUFFER_SIZE];
 8000af0:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <USART3_IRQHandler+0xdc>)
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <USART3_IRQHandler+0xf4>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	3301      	adds	r3, #1
 8000af8:	490e      	ldr	r1, [pc, #56]	; (8000b34 <USART3_IRQHandler+0xf4>)
 8000afa:	600b      	str	r3, [r1, #0]
 8000afc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b00:	490d      	ldr	r1, [pc, #52]	; (8000b38 <USART3_IRQHandler+0xf8>)
 8000b02:	5ccb      	ldrb	r3, [r1, r3]
 8000b04:	8093      	strh	r3, [r2, #4]
			GPIOD->ODR ^= (1 << 13);
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <USART3_IRQHandler+0xe8>)
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <USART3_IRQHandler+0xe8>)
 8000b0a:	6952      	ldr	r2, [r2, #20]
 8000b0c:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8000b10:	615a      	str	r2, [r3, #20]
		}
	}
}
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40004800 	.word	0x40004800
 8000b20:	20000204 	.word	0x20000204
 8000b24:	20000208 	.word	0x20000208
 8000b28:	40020c00 	.word	0x40020c00
 8000b2c:	20000004 	.word	0x20000004
 8000b30:	2000028c 	.word	0x2000028c
 8000b34:	20000290 	.word	0x20000290
 8000b38:	2000020c 	.word	0x2000020c

08000b3c <Serial_Init>:

void Serial_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <Serial_Init+0x64>)
 8000b42:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <Serial_Init+0x64>)
 8000b44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000b46:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000b4a:	641a      	str	r2, [r3, #64]	; 0x40

	GPIO_ConfigPin(GPIOD, 8, GPIO_AF7_PP_50MHz_PULL_UP ); // TX
 8000b4c:	4815      	ldr	r0, [pc, #84]	; (8000ba4 <Serial_Init+0x68>)
 8000b4e:	2108      	movs	r1, #8
 8000b50:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <Serial_Init+0x6c>)
 8000b52:	f7ff fcd1 	bl	80004f8 <GPIO_ConfigPin>
	GPIO_ConfigPin(GPIOD, 9, GPIO_AF7_PP_50MHz_PULL_UP ); // RX
 8000b56:	4813      	ldr	r0, [pc, #76]	; (8000ba4 <Serial_Init+0x68>)
 8000b58:	2109      	movs	r1, #9
 8000b5a:	4a13      	ldr	r2, [pc, #76]	; (8000ba8 <Serial_Init+0x6c>)
 8000b5c:	f7ff fccc 	bl	80004f8 <GPIO_ConfigPin>

	USART3->BRR = 42000000 / 115200; // APB1 speed / baudrate
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <Serial_Init+0x70>)
 8000b62:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8000b66:	811a      	strh	r2, [r3, #8]
	USART3->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_TXEIE | USART_CR1_RXNEIE;
 8000b68:	4b10      	ldr	r3, [pc, #64]	; (8000bac <Serial_Init+0x70>)
 8000b6a:	4a10      	ldr	r2, [pc, #64]	; (8000bac <Serial_Init+0x70>)
 8000b6c:	8992      	ldrh	r2, [r2, #12]
 8000b6e:	b292      	uxth	r2, r2
 8000b70:	f042 02ac 	orr.w	r2, r2, #172	; 0xac
 8000b74:	b292      	uxth	r2, r2
 8000b76:	819a      	strh	r2, [r3, #12]
	USART3->CR1 |= USART_CR1_UE;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <Serial_Init+0x70>)
 8000b7a:	4a0c      	ldr	r2, [pc, #48]	; (8000bac <Serial_Init+0x70>)
 8000b7c:	8992      	ldrh	r2, [r2, #12]
 8000b7e:	b292      	uxth	r2, r2
 8000b80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b84:	b292      	uxth	r2, r2
 8000b86:	819a      	strh	r2, [r3, #12]
	USART3->CR3 |= USART_CR3_DMAT;
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <Serial_Init+0x70>)
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <Serial_Init+0x70>)
 8000b8c:	8a92      	ldrh	r2, [r2, #20]
 8000b8e:	b292      	uxth	r2, r2
 8000b90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b94:	b292      	uxth	r2, r2
 8000b96:	829a      	strh	r2, [r3, #20]

	NVIC_EnableIRQ(USART3_IRQn);
 8000b98:	2027      	movs	r0, #39	; 0x27
 8000b9a:	f7ff ff39 	bl	8000a10 <NVIC_EnableIRQ>
}
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020c00 	.word	0x40020c00
 8000ba8:	00071202 	.word	0x00071202
 8000bac:	40004800 	.word	0x40004800

08000bb0 <Serial_Putc>:

	return ch;
}

void Serial_Putc(char c)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
	while(txQueueTail - txQueueHead == TX_BUFFER_SIZE - 1);
 8000bba:	bf00      	nop
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <Serial_Putc+0x48>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <Serial_Putc+0x4c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	2b7f      	cmp	r3, #127	; 0x7f
 8000bc8:	d0f8      	beq.n	8000bbc <Serial_Putc+0xc>

	txQueueData[++txQueueHead % TX_BUFFER_SIZE] = c;
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <Serial_Putc+0x4c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <Serial_Putc+0x4c>)
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bd8:	4a09      	ldr	r2, [pc, #36]	; (8000c00 <Serial_Putc+0x50>)
 8000bda:	79f9      	ldrb	r1, [r7, #7]
 8000bdc:	54d1      	strb	r1, [r2, r3]
	USART3->CR1 |= USART_CR1_TXEIE;
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <Serial_Putc+0x54>)
 8000be0:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <Serial_Putc+0x54>)
 8000be2:	8992      	ldrh	r2, [r2, #12]
 8000be4:	b292      	uxth	r2, r2
 8000be6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000bea:	b292      	uxth	r2, r2
 8000bec:	819a      	strh	r2, [r3, #12]
}
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	20000290 	.word	0x20000290
 8000bfc:	2000028c 	.word	0x2000028c
 8000c00:	2000020c 	.word	0x2000020c
 8000c04:	40004800 	.word	0x40004800

08000c08 <Serial_Puts>:

void Serial_Puts(char *s)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	while (*s)
 8000c10:	e006      	b.n	8000c20 <Serial_Puts+0x18>
		Serial_Putc(*s++);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	607a      	str	r2, [r7, #4]
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ffc8 	bl	8000bb0 <Serial_Putc>
	USART3->CR1 |= USART_CR1_TXEIE;
}

void Serial_Puts(char *s)
{
	while (*s)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1f4      	bne.n	8000c12 <Serial_Puts+0xa>
		Serial_Putc(*s++);
}
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop

08000c30 <ADC_IRQHandler>:
* own handler defined.
*//*-------------------------------------------------------------------------*/

static void __Default_Handler(void) __attribute__ ((interrupt));
static void __Default_Handler(void)
{
 8000c30:	4668      	mov	r0, sp
 8000c32:	f020 0107 	bic.w	r1, r0, #7
 8000c36:	468d      	mov	sp, r1
 8000c38:	b481      	push	{r0, r7}
 8000c3a:	af00      	add	r7, sp, #0
	while (1);
 8000c3c:	e7fe      	b.n	8000c3c <ADC_IRQHandler+0xc>
 8000c3e:	bf00      	nop
 8000c40:	74736574 	.word	0x74736574
 8000c44:	61737520 	.word	0x61737520
 8000c48:	2e337472 	.word	0x2e337472
 8000c4c:	0a0d2e2e 	.word	0x0a0d2e2e
 8000c50:	00000000 	.word	0x00000000
