
out/stm32_blink_led.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <__text_start>:
 8000000:	20000000 	.word	0x20000000
 8000004:	08000131 	.word	0x08000131
 8000008:	080003ed 	.word	0x080003ed
 800000c:	080003ed 	.word	0x080003ed
 8000010:	080003ed 	.word	0x080003ed
 8000014:	080003ed 	.word	0x080003ed
 8000018:	080003ed 	.word	0x080003ed
 800001c:	080003ed 	.word	0x080003ed
 8000020:	080003ed 	.word	0x080003ed
 8000024:	080003ed 	.word	0x080003ed
 8000028:	080003ed 	.word	0x080003ed
 800002c:	080003ed 	.word	0x080003ed
 8000030:	080003ed 	.word	0x080003ed
 8000034:	080003ed 	.word	0x080003ed
 8000038:	080003ed 	.word	0x080003ed
 800003c:	080003ed 	.word	0x080003ed
 8000040:	080003ed 	.word	0x080003ed
 8000044:	080003ed 	.word	0x080003ed
 8000048:	080003ed 	.word	0x080003ed
 800004c:	080003ed 	.word	0x080003ed
 8000050:	080003ed 	.word	0x080003ed
 8000054:	080003ed 	.word	0x080003ed
 8000058:	080003ed 	.word	0x080003ed
 800005c:	080003ed 	.word	0x080003ed
 8000060:	080003ed 	.word	0x080003ed
 8000064:	080003ed 	.word	0x080003ed
 8000068:	080003ed 	.word	0x080003ed
 800006c:	080003ed 	.word	0x080003ed
 8000070:	080003ed 	.word	0x080003ed
 8000074:	080003ed 	.word	0x080003ed
 8000078:	080003ed 	.word	0x080003ed
 800007c:	080003ed 	.word	0x080003ed
 8000080:	080003ed 	.word	0x080003ed
 8000084:	080003ed 	.word	0x080003ed
 8000088:	080003ed 	.word	0x080003ed
 800008c:	080003ed 	.word	0x080003ed
 8000090:	080003ed 	.word	0x080003ed
 8000094:	080003ed 	.word	0x080003ed
 8000098:	080003ed 	.word	0x080003ed
 800009c:	080003ed 	.word	0x080003ed
 80000a0:	080003ed 	.word	0x080003ed
 80000a4:	080003ed 	.word	0x080003ed
 80000a8:	080003ed 	.word	0x080003ed
 80000ac:	080003ed 	.word	0x080003ed
 80000b0:	080003ed 	.word	0x080003ed
 80000b4:	080003ed 	.word	0x080003ed
 80000b8:	080003ed 	.word	0x080003ed
 80000bc:	080003ed 	.word	0x080003ed
 80000c0:	080003ed 	.word	0x080003ed
 80000c4:	080003ed 	.word	0x080003ed
 80000c8:	080003ed 	.word	0x080003ed
 80000cc:	080003ed 	.word	0x080003ed
 80000d0:	080003ed 	.word	0x080003ed
 80000d4:	080003ed 	.word	0x080003ed
 80000d8:	080003ed 	.word	0x080003ed
 80000dc:	080003ed 	.word	0x080003ed
 80000e0:	080003ed 	.word	0x080003ed
 80000e4:	080003ed 	.word	0x080003ed
 80000e8:	080003ed 	.word	0x080003ed
 80000ec:	080003ed 	.word	0x080003ed
 80000f0:	080003ed 	.word	0x080003ed
 80000f4:	080003ed 	.word	0x080003ed
 80000f8:	080003ed 	.word	0x080003ed
 80000fc:	080003ed 	.word	0x080003ed
 8000100:	080003ed 	.word	0x080003ed
 8000104:	080003ed 	.word	0x080003ed
 8000108:	080003ed 	.word	0x080003ed
 800010c:	080003ed 	.word	0x080003ed
 8000110:	080003ed 	.word	0x080003ed
 8000114:	080003ed 	.word	0x080003ed
 8000118:	080003ed 	.word	0x080003ed
 800011c:	080003ed 	.word	0x080003ed
 8000120:	080003ed 	.word	0x080003ed
 8000124:	080003ed 	.word	0x080003ed
 8000128:	080003ed 	.word	0x080003ed
 800012c:	080003ed 	.word	0x080003ed

08000130 <Reset_Handler>:
+-----------------------------------------------------------------------------+
| Initialize the process stack pointer
+-----------------------------------------------------------------------------+
*/

	ldr		r0, =__process_stack_end
 8000130:	4810      	ldr	r0, [pc, #64]	; (8000174 <__default_low_level_init+0x2>)
	msr		PSP, r0
 8000132:	f380 8809 	msr	PSP, r0
+-----------------------------------------------------------------------------+
| Thread mode uses process stack (PSP) and is privileged
+-----------------------------------------------------------------------------+
*/

	movs	r0, #CONTROL_ALTERNATE_STACK
 8000136:	2002      	movs	r0, #2
	msr		CONTROL, r0
 8000138:	f380 8814 	msr	CONTROL, r0
	isb
 800013c:	f3bf 8f6f 	isb	sy
+-----------------------------------------------------------------------------+
| Branch to low_level_init_0() function (.data and .bss are not initialized!)
+-----------------------------------------------------------------------------+
*/

	ldr		r0, =low_level_init_0
 8000140:	480d      	ldr	r0, [pc, #52]	; (8000178 <__default_low_level_init+0x6>)
	blx		r0
 8000142:	4780      	blx	r0
+-----------------------------------------------------------------------------+
| Initialize .data section
+-----------------------------------------------------------------------------+
*/

	ldr		r1, =__data_init_start
 8000144:	490d      	ldr	r1, [pc, #52]	; (800017c <__default_low_level_init+0xa>)
    ldr		r2, =__data_start
 8000146:	4a0e      	ldr	r2, [pc, #56]	; (8000180 <__default_low_level_init+0xe>)
    ldr		r3, =__data_end
 8000148:	4b0e      	ldr	r3, [pc, #56]	; (8000184 <__default_low_level_init+0x12>)

1:	cmp		r2, r3
 800014a:	429a      	cmp	r2, r3
	ittt	lo
 800014c:	bf3e      	ittt	cc
	ldrlo	r0, [r1], #4
 800014e:	f851 0b04 	ldrcc.w	r0, [r1], #4
	strlo	r0, [r2], #4
 8000152:	f842 0b04 	strcc.w	r0, [r2], #4
	blo		1b
 8000156:	e7f8      	bcc.n	800014a <Reset_Handler+0x1a>
+-----------------------------------------------------------------------------+
| Zero-init .bss section
+-----------------------------------------------------------------------------+
*/

	movs	r0, #0
 8000158:	2000      	movs	r0, #0
	ldr		r1, =__bss_start
 800015a:	490b      	ldr	r1, [pc, #44]	; (8000188 <__default_low_level_init+0x16>)
	ldr		r2, =__bss_end
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <__default_low_level_init+0x1a>)

1:	cmp		r1, r2
 800015e:	4291      	cmp	r1, r2
	itt		lo
 8000160:	bf3c      	itt	cc
	strlo	r0, [r1], #4
 8000162:	f841 0b04 	strcc.w	r0, [r1], #4
	blo		1b
 8000166:	e7fa      	bcc.n	800015e <Reset_Handler+0x2e>
+-----------------------------------------------------------------------------+
| Branch to low_level_init_1() function
+-----------------------------------------------------------------------------+
*/

	ldr		r0, =low_level_init_1
 8000168:	4809      	ldr	r0, [pc, #36]	; (8000190 <__default_low_level_init+0x1e>)
	blx		r0
 800016a:	4780      	blx	r0
+-----------------------------------------------------------------------------+
| Branch to main() with link
+-----------------------------------------------------------------------------+
*/

	ldr		r0, =main
 800016c:	4809      	ldr	r0, [pc, #36]	; (8000194 <__default_low_level_init+0x22>)
	blx		r0
 800016e:	4780      	blx	r0
+-----------------------------------------------------------------------------+
| On return - loop till the end of the world
+-----------------------------------------------------------------------------+
*/

	b		.
 8000170:	e7fe      	b.n	8000170 <Reset_Handler+0x40>

08000172 <__default_low_level_init>:
.thumb
.thumb_func
.global __default_low_level_init

__default_low_level_init:
	bx		lr
 8000172:	4770      	bx	lr
+-----------------------------------------------------------------------------+
| Initialize the process stack pointer
+-----------------------------------------------------------------------------+
*/

	ldr		r0, =__process_stack_end
 8000174:	20000400 	.word	0x20000400
+-----------------------------------------------------------------------------+
| Branch to low_level_init_0() function (.data and .bss are not initialized!)
+-----------------------------------------------------------------------------+
*/

	ldr		r0, =low_level_init_0
 8000178:	08000173 	.word	0x08000173
+-----------------------------------------------------------------------------+
| Initialize .data section
+-----------------------------------------------------------------------------+
*/

	ldr		r1, =__data_init_start
 800017c:	080003fc 	.word	0x080003fc
    ldr		r2, =__data_start
 8000180:	20000000 	.word	0x20000000
    ldr		r3, =__data_end
 8000184:	20000000 	.word	0x20000000
| Zero-init .bss section
+-----------------------------------------------------------------------------+
*/

	movs	r0, #0
	ldr		r1, =__bss_start
 8000188:	20000000 	.word	0x20000000
	ldr		r2, =__bss_end
 800018c:	20000000 	.word	0x20000000
+-----------------------------------------------------------------------------+
| Branch to low_level_init_1() function
+-----------------------------------------------------------------------------+
*/

	ldr		r0, =low_level_init_1
 8000190:	08000173 	.word	0x08000173
+-----------------------------------------------------------------------------+
| Branch to main() with link
+-----------------------------------------------------------------------------+
*/

	ldr		r0, =main
 8000194:	0800028d 	.word	0x0800028d

08000198 <gpio_init>:
* \brief GPIO initialization.
* \details Enables AFIO, all GPIO ports and sets them to input with pull-downs.
*//*-------------------------------------------------------------------------*/

void gpio_init(void)
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	RCC->APB2ENR = RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN | RCC_APB2ENR_IOPCEN |
 800019c:	4b1e      	ldr	r3, [pc, #120]	; (8000218 <gpio_init+0x80>)
 800019e:	227d      	movs	r2, #125	; 0x7d
 80001a0:	619a      	str	r2, [r3, #24]
			RCC_APB2ENR_IOPDEN | RCC_APB2ENR_IOPEEN | RCC_APB2ENR_AFIOEN;	// enable all GPIOs and AFIO

	// set all ports to input with pull-down
	GPIOA->CRL = 0x88888888;
 80001a2:	4b1e      	ldr	r3, [pc, #120]	; (800021c <gpio_init+0x84>)
 80001a4:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80001a8:	601a      	str	r2, [r3, #0]
	GPIOA->CRH = 0x88888888;
 80001aa:	4b1c      	ldr	r3, [pc, #112]	; (800021c <gpio_init+0x84>)
 80001ac:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80001b0:	605a      	str	r2, [r3, #4]
	GPIOA->ODR = 0;
 80001b2:	4b1a      	ldr	r3, [pc, #104]	; (800021c <gpio_init+0x84>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	60da      	str	r2, [r3, #12]
	GPIOB->CRL = 0x88888888;
 80001b8:	4b19      	ldr	r3, [pc, #100]	; (8000220 <gpio_init+0x88>)
 80001ba:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80001be:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0x88888888;
 80001c0:	4b17      	ldr	r3, [pc, #92]	; (8000220 <gpio_init+0x88>)
 80001c2:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80001c6:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0;
 80001c8:	4b15      	ldr	r3, [pc, #84]	; (8000220 <gpio_init+0x88>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	60da      	str	r2, [r3, #12]
	GPIOC->CRL = 0x88888888;
 80001ce:	4b15      	ldr	r3, [pc, #84]	; (8000224 <gpio_init+0x8c>)
 80001d0:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80001d4:	601a      	str	r2, [r3, #0]
	GPIOC->CRH = 0x88888888;
 80001d6:	4b13      	ldr	r3, [pc, #76]	; (8000224 <gpio_init+0x8c>)
 80001d8:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80001dc:	605a      	str	r2, [r3, #4]
	GPIOC->ODR = 0;
 80001de:	4b11      	ldr	r3, [pc, #68]	; (8000224 <gpio_init+0x8c>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	60da      	str	r2, [r3, #12]
	GPIOD->CRL = 0x88888888;
 80001e4:	4b10      	ldr	r3, [pc, #64]	; (8000228 <gpio_init+0x90>)
 80001e6:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80001ea:	601a      	str	r2, [r3, #0]
	GPIOD->CRH = 0x88888888;
 80001ec:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <gpio_init+0x90>)
 80001ee:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80001f2:	605a      	str	r2, [r3, #4]
	GPIOD->ODR = 0;
 80001f4:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <gpio_init+0x90>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	60da      	str	r2, [r3, #12]
	GPIOE->CRL = 0x88888888;
 80001fa:	4b0c      	ldr	r3, [pc, #48]	; (800022c <gpio_init+0x94>)
 80001fc:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000200:	601a      	str	r2, [r3, #0]
	GPIOE->CRH = 0x88888888;
 8000202:	4b0a      	ldr	r3, [pc, #40]	; (800022c <gpio_init+0x94>)
 8000204:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000208:	605a      	str	r2, [r3, #4]
	GPIOE->ODR = 0;
 800020a:	4b08      	ldr	r3, [pc, #32]	; (800022c <gpio_init+0x94>)
 800020c:	2200      	movs	r2, #0
 800020e:	60da      	str	r2, [r3, #12]
}
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr
 8000218:	40021000 	.word	0x40021000
 800021c:	40010800 	.word	0x40010800
 8000220:	40010c00 	.word	0x40010c00
 8000224:	40011000 	.word	0x40011000
 8000228:	40011400 	.word	0x40011400
 800022c:	40011800 	.word	0x40011800

08000230 <gpio_pin_cfg>:
* GPIO_CRx_MODE_CNF_ALT_OD_10M_value, GPIO_CRx_MODE_CNF_ALT_OD_50M_value} or
* use m_GPIO_MODE_CNF_value(mode, cnf) macro
*//*-------------------------------------------------------------------------*/

void gpio_pin_cfg(GPIO_TypeDef *port_ptr, uint32_t pin, uint32_t mode_cnf_value)
{
 8000230:	b480      	push	{r7}
 8000232:	b087      	sub	sp, #28
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	607a      	str	r2, [r7, #4]
	volatile uint32_t *cr_ptr;
	uint32_t cr_value;

	cr_ptr = &port_ptr->CRL;				// configuration of pins [0,7] is in CRL
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	617b      	str	r3, [r7, #20]

	if (pin >= 8)							// is pin in [8; 15]?
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	2b07      	cmp	r3, #7
 8000244:	d905      	bls.n	8000252 <gpio_pin_cfg+0x22>
	{										// configuration of pins [8,15] is in CRH
		cr_ptr++;							// advance to next struct element CRL -> CRH
 8000246:	697b      	ldr	r3, [r7, #20]
 8000248:	3304      	adds	r3, #4
 800024a:	617b      	str	r3, [r7, #20]
		pin -= 8;							// crop the pin number
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	3b08      	subs	r3, #8
 8000250:	60bb      	str	r3, [r7, #8]
	}

	cr_value = *cr_ptr;						// localize the CRL / CRH value
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	613b      	str	r3, [r7, #16]

	cr_value &= ~(GPIO_CRx_MODE_CNF_mask << (pin * 4));	// clear the MODE and CNF fields (now that pin is an analog input)
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	461a      	mov	r2, r3
 800025e:	230f      	movs	r3, #15
 8000260:	4093      	lsls	r3, r2
 8000262:	43db      	mvns	r3, r3
 8000264:	461a      	mov	r2, r3
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	4013      	ands	r3, r2
 800026a:	613b      	str	r3, [r7, #16]
	cr_value |= (mode_cnf_value << (pin * 4));	// save new MODE and CNF value for desired pin
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	461a      	mov	r2, r3
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4093      	lsls	r3, r2
 8000276:	693a      	ldr	r2, [r7, #16]
 8000278:	4313      	orrs	r3, r2
 800027a:	613b      	str	r3, [r7, #16]

	*cr_ptr = cr_value;						// save localized value to CRL / CRL
 800027c:	697b      	ldr	r3, [r7, #20]
 800027e:	693a      	ldr	r2, [r7, #16]
 8000280:	601a      	str	r2, [r3, #0]
}
 8000282:	371c      	adds	r7, #28
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr

0800028c <main>:
static uint32_t pll_start(uint32_t crystal, uint32_t frequency);
static void system_init(void);


int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
	volatile uint32_t count, count_max = 1000000;
 8000292:	4b14      	ldr	r3, [pc, #80]	; (80002e4 <main+0x58>)
 8000294:	603b      	str	r3, [r7, #0]

	system_init();
 8000296:	f000 f8a3 	bl	80003e0 <system_init>
	pll_start(CRYSTAL, FREQUENCY);
 800029a:	4813      	ldr	r0, [pc, #76]	; (80002e8 <main+0x5c>)
 800029c:	4913      	ldr	r1, [pc, #76]	; (80002ec <main+0x60>)
 800029e:	f000 f851 	bl	8000344 <pll_start>

	gpio_pin_cfg(LED_GPIO, LED_pin, GPIO_CRx_MODE_CNF_OUT_PP_10M_value);
 80002a2:	4813      	ldr	r0, [pc, #76]	; (80002f0 <main+0x64>)
 80002a4:	2101      	movs	r1, #1
 80002a6:	2201      	movs	r2, #1
 80002a8:	f7ff ffc2 	bl	8000230 <gpio_pin_cfg>

	while (1)
	{
		for (count = 0; count < count_max; count++);	// delay
 80002ac:	2300      	movs	r3, #0
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	e002      	b.n	80002b8 <main+0x2c>
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3301      	adds	r3, #1
 80002b6:	607b      	str	r3, [r7, #4]
 80002b8:	687a      	ldr	r2, [r7, #4]
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	429a      	cmp	r2, r3
 80002be:	d3f8      	bcc.n	80002b2 <main+0x26>
		LED_bb = 1;
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <main+0x68>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	601a      	str	r2, [r3, #0]
		for (count = 0; count < count_max; count++);	// delay
 80002c6:	2300      	movs	r3, #0
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	e002      	b.n	80002d2 <main+0x46>
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3301      	adds	r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d3f8      	bcc.n	80002cc <main+0x40>
		LED_bb = 0;
 80002da:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <main+0x68>)
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
	}
 80002e0:	e7e4      	b.n	80002ac <main+0x20>
 80002e2:	bf00      	nop
 80002e4:	000f4240 	.word	0x000f4240
 80002e8:	007a1200 	.word	0x007a1200
 80002ec:	044aa200 	.word	0x044aa200
 80002f0:	40010c00 	.word	0x40010c00
 80002f4:	42218184 	.word	0x42218184

080002f8 <flash_latency>:
}

static void flash_latency(uint32_t frequency)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	uint32_t wait_states;

	if (frequency < 24000000UL)				// 0 wait states for core speed below 24MHz
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4a0d      	ldr	r2, [pc, #52]	; (8000338 <flash_latency+0x40>)
 8000304:	4293      	cmp	r3, r2
 8000306:	d802      	bhi.n	800030e <flash_latency+0x16>
		wait_states = 0;
 8000308:	2300      	movs	r3, #0
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	e008      	b.n	8000320 <flash_latency+0x28>
	else if (frequency < 48000000UL)		// 1 wait state for core speed between 24MHz and 48MHz
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4a0a      	ldr	r2, [pc, #40]	; (800033c <flash_latency+0x44>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d802      	bhi.n	800031c <flash_latency+0x24>
		wait_states = 1;
 8000316:	2301      	movs	r3, #1
 8000318:	60fb      	str	r3, [r7, #12]
 800031a:	e001      	b.n	8000320 <flash_latency+0x28>
	else									// 2 wait states for core speed over 48MHz
		wait_states = 2;
 800031c:	2302      	movs	r3, #2
 800031e:	60fb      	str	r3, [r7, #12]

	FLASH->ACR |= wait_states;				// set the latency
 8000320:	4907      	ldr	r1, [pc, #28]	; (8000340 <flash_latency+0x48>)
 8000322:	4b07      	ldr	r3, [pc, #28]	; (8000340 <flash_latency+0x48>)
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	4313      	orrs	r3, r2
 800032a:	600b      	str	r3, [r1, #0]
}
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	016e35ff 	.word	0x016e35ff
 800033c:	02dc6bff 	.word	0x02dc6bff
 8000340:	40022000 	.word	0x40022000

08000344 <pll_start>:

static uint32_t pll_start(uint32_t crystal, uint32_t frequency)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	6039      	str	r1, [r7, #0]
	uint32_t mul;

	RCC_CR_HSEON_bb = 1;					// enable HSE clock
 800034e:	4b1f      	ldr	r3, [pc, #124]	; (80003cc <pll_start+0x88>)
 8000350:	2201      	movs	r2, #1
 8000352:	601a      	str	r2, [r3, #0]
	flash_latency(frequency);				// configure Flash latency for desired frequency
 8000354:	6838      	ldr	r0, [r7, #0]
 8000356:	f7ff ffcf 	bl	80002f8 <flash_latency>

	mul = frequency / crystal;				// PLL multiplier calculation
 800035a:	683a      	ldr	r2, [r7, #0]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000362:	60fb      	str	r3, [r7, #12]

	if (mul > 16)							// max PLL multiplier is 16
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	2b10      	cmp	r3, #16
 8000368:	d901      	bls.n	800036e <pll_start+0x2a>
		mul = 16;
 800036a:	2310      	movs	r3, #16
 800036c:	60fb      	str	r3, [r7, #12]

	frequency = crystal * mul;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fb02 f303 	mul.w	r3, r2, r3
 8000376:	603b      	str	r3, [r7, #0]

	RCC->CFGR |= ((mul - 2) << RCC_CFGR_PLLMUL_bit) | RCC_CFGR_PLLSRC | RCC_CFGR_PPRE1_DIV2;	// configuration of PLL: HSE x (mul), APB1 clk = /2
 8000378:	4915      	ldr	r1, [pc, #84]	; (80003d0 <pll_start+0x8c>)
 800037a:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <pll_start+0x8c>)
 800037c:	685a      	ldr	r2, [r3, #4]
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	3b02      	subs	r3, #2
 8000382:	049b      	lsls	r3, r3, #18
 8000384:	4313      	orrs	r3, r2
 8000386:	f443 3382 	orr.w	r3, r3, #66560	; 0x10400
 800038a:	604b      	str	r3, [r1, #4]

	while (!RCC_CR_HSERDY_bb);				// wait for stable clock
 800038c:	bf00      	nop
 800038e:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <pll_start+0x90>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d0fb      	beq.n	800038e <pll_start+0x4a>

	RCC_CR_PLLON_bb = 1;					// enable PLL
 8000396:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <pll_start+0x94>)
 8000398:	2201      	movs	r2, #1
 800039a:	601a      	str	r2, [r3, #0]
	while (!RCC_CR_PLLRDY_bb);				// wait for PLL lock
 800039c:	bf00      	nop
 800039e:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <pll_start+0x98>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d0fb      	beq.n	800039e <pll_start+0x5a>

	RCC->CFGR |= RCC_CFGR_SW_PLL;			// change SYSCLK to PLL
 80003a6:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <pll_start+0x8c>)
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <pll_start+0x8c>)
 80003aa:	685b      	ldr	r3, [r3, #4]
 80003ac:	f043 0302 	orr.w	r3, r3, #2
 80003b0:	6053      	str	r3, [r2, #4]
	while (((RCC->CFGR) & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	// wait for switch
 80003b2:	bf00      	nop
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <pll_start+0x8c>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	f003 030c 	and.w	r3, r3, #12
 80003bc:	2b08      	cmp	r3, #8
 80003be:	d1f9      	bne.n	80003b4 <pll_start+0x70>

	return frequency;
 80003c0:	683b      	ldr	r3, [r7, #0]
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3710      	adds	r7, #16
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	42420040 	.word	0x42420040
 80003d0:	40021000 	.word	0x40021000
 80003d4:	42420044 	.word	0x42420044
 80003d8:	42420060 	.word	0x42420060
 80003dc:	42420064 	.word	0x42420064

080003e0 <system_init>:

static void system_init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	gpio_init();
 80003e4:	f7ff fed8 	bl	8000198 <gpio_init>
}
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop

080003ec <ADC1_2_IRQHandler>:
* own handler defined.
*//*-------------------------------------------------------------------------*/

static void __Default_Handler(void) __attribute__ ((interrupt));
static void __Default_Handler(void)
{
 80003ec:	4668      	mov	r0, sp
 80003ee:	f020 0107 	bic.w	r1, r0, #7
 80003f2:	468d      	mov	sp, r1
 80003f4:	b481      	push	{r0, r7}
 80003f6:	af00      	add	r7, sp, #0
	while (1);
 80003f8:	e7fe      	b.n	80003f8 <ADC1_2_IRQHandler+0xc>
 80003fa:	bf00      	nop
