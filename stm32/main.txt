#include <stdint.h>

#include "config.h"
#include "inc/stm32f4xx.h"
#include "hdr/hdr_rcc.h"
#include "hdr/hdr_gpio.h"
#include "hdr/hdr_bitband.h"
#include "gpio.h"
#include "delay.h"

//#include "hd44780.h"

void PWM_init(void)
{
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // w³¹czenie zegara GPIOA
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; // w³¹czenie zegara TIM1

	GPIOA->MODER |= GPIO_MODER_MODER8_1 | GPIO_MODER_MODER9_1; // funkcje alternatywne dla PA8, PA9
	GPIOA->AFR[1] = (1 << 0) | (1 << 4); // AF1 dla PA8, PA9

	//gpio_pin_cfg(GPIOA, 1, GPIO_AFRx_AF1_value);

	TIM1->PSC = 10000; // preskaler 1
	TIM1->ARR = 100; // wartosc dla ktorej nastompi zmiana
	TIM1->CCMR1 = TIM_CCMR1_OC1M_1 | // PWM mode 1 (110), kana³ 1
				  TIM_CCMR1_OC1M_2 | //
				  TIM_CCMR1_OC1PE  |

				  TIM_CCMR1_OC2M_1 | // mode 1 dla kana³u 2
				  TIM_CCMR1_OC2M_2 |
				  TIM_CCMR1_OC2PE;

	TIM1->CCER  |= TIM_CCER_CC1E | TIM_CCER_CC2E; // 1 i 2 kana³
	TIM1->EGR 	|= TIM_EGR_UG; // update generation
	TIM1->BDTR  |= TIM_BDTR_MOE; // time-break, dead-time
	TIM1->CR1   |= TIM_CR1_CEN; // w³¹czenie timera

};

void TIM2_init(void)
{
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; // w³¹czenie zegara TIM2

	TIM2->PSC   = 16799;		// zwiekszenie co 0.1ms
	TIM2->ARR   = 5000; 		//Auto-reload register
	TIM2->EGR  |= TIM_EGR_UG;	//Update generation
	TIM2->CR1   = TIM_CR1_CEN | TIM_CR1_URS | TIM_CR1_ARPE; // arpe!
	TIM2->DIER |= TIM_DIER_CC1IE;

	NVIC_EnableIRQ(TIM2_IRQn);
}

void TIM2_IRQHandler(void)
{
	if(TIM2->SR & TIM_SR_UIF)
	{
		//GPIOA->ODR ^= (1 << 8);

		//runTimers();

		TIM2->SR &= ~TIM_SR_UIF;
	}
}

//void tmr1(void) {
//	GPIOA->ODR ^= (1 << 8);
//}


void TIM4_init(void) {
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN; // enable TIM4

	gpio_pin_cfg(GPIOD, 12, GPIO_AF2_PP_25MHz);
	gpio_pin_cfg(GPIOD, 13, GPIO_AF2_PP_25MHz);
	gpio_pin_cfg(GPIOD, 14, GPIO_AF2_PP_25MHz);
	gpio_pin_cfg(GPIOD, 15, GPIO_AF2_PP_25MHz);

	TIM4->PSC = 41; // apb1/42=1MHz
	TIM4->ARR = 999;
	TIM4->CCR1 = 0; // start width
	TIM4->CCR2 = 0;
	TIM4->CCR3 = 0;
	TIM4->CCR4 = 0;
	TIM4->CCMR1 = TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2; // PWM mode 1
	TIM4->CCMR2 = TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
	TIM4->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E; // enable channels
	TIM4->CR1 = TIM_CR1_CEN; // enable counter

	NVIC_EnableIRQ(TIM4_IRQn); // enable interrupt
}

void TIM4_IRQHandler(void)
{
	if(TIM4->SR & TIM_SR_UIF)
	{

		TIM4->SR &= ~TIM_SR_UIF;
	}
}

int main(void)
{

	delay_config();

	//fpu_enable();
	gpio_init();
 	pll_start(CRYSTAL, FREQUENCY);

 	gpio_pin_cfg(GPIOD, 12, GPIO_OUT_PP_25MHz);
 	gpio_pin_cfg(GPIOD, 13, GPIO_OUT_PP_25MHz);
 	gpio_pin_cfg(GPIOD, 14, GPIO_OUT_PP_25MHz);
 	gpio_pin_cfg(GPIOD, 15, GPIO_OUT_PP_25MHz);
 	gpio_pin_cfg(GPIOC, 0, GPIO_OUT_PP_25MHz);

 	gpio_pin_cfg(GPIOC, 1, GPIO_IN_PULL_UP);

 	int i = 5;

 	while (i--){
 		GPIOC->ODR ^= (1 << 0);
 		delay_ms(250);
 	}

 	i = 5;


 	while(i--){
 		GPIOD->ODR ^= (1 << 12);
 		delay_ms(100);
 		GPIOD->ODR ^= (1 << 13);
 		delay_ms(100);
 		GPIOD->ODR ^= (1 << 14);
 		delay_ms(100);
 		GPIOD->ODR ^= (1 << 15);
 		delay_ms(100);
 	}

 	i = 3;

 	while (i--){

 	GPIOD->ODR ^= (1 << 12) | (1 << 13) | (1 << 14) | (1 << 15);
 	delay_ms(200);
 	}

 	while (1)
 	{
 		GPIOC->ODR |= (GPIOC->IDR & (1 << 1));

 	}


	//PWM_init();

	//TIM2_init();

	//clearTimers();
	//setTimer(1, &tmr1);

 	//gpio_pin_cfg(GPIOD, 12, GPIO_OUT_PP_25MHz);

 	//LCD_Initialize();

	//char font1[] = {0x04,0x0E,0x0E,0x0E,0x1F,0x00,0x04,0x00};

 	//LCD_WriteFont(0x00, font1);

 	//LCD_WriteData(0x00);

	//while (1)
	//{
	//	GPIOD->ODR ^= (1 << 12);
	//
	//	LCD_WriteText("This is STM32F4!");

	//	delay_ms(1000);
	//}
}
